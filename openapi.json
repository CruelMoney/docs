{
  "openapi": "3.1.0",
  "info": {
    "title": "Moderation API",
    "description": "API for automated content moderation",
    "version": "1.0.0"
  },
  "servers": [{ "url": "https://moderationapi.com/api/v1" }],
  "tags": [
    { "name": "Actions" },
    { "name": "Queues" },
    { "name": "Webhooks" },
    { "name": "Wordlist" },
    { "name": "UserReports" }
  ],
  "externalDocs": { "url": "https://docs.moderationapi.com" },
  "paths": {
    "/authors": {
      "get": {
        "operationId": "author-openListAuthors",
        "summary": "List authors",
        "description": "Get a paginated list of authors with their activity metrics and reputation",
        "tags": ["author"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "description": "Number of authors per page",
              "default": "20",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "description": "Page number to fetch",
              "default": "1",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "trustLevel",
                "violationCount",
                "reportCount",
                "memberSince",
                "lastActive",
                "contentCount",
                "flaggedContentRatio",
                "averageSentiment"
              ]
            }
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "description": "Sort direction",
              "default": "desc",
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "in": "query",
            "name": "memberSinceDate",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "lastActiveDate",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "contentTypes",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Author ID in Moderation API",
                            "type": "string"
                          },
                          "external_id": {
                            "description": "The author's ID from your system",
                            "anyOf": [{ "type": "string" }, { "type": "null" }]
                          },
                          "profile_picture": {
                            "description": "URL of the author's profile picture",
                            "anyOf": [
                              { "type": "string", "format": "uri" },
                              { "type": "null" }
                            ]
                          },
                          "external_link": {
                            "description": "URL of the author's external profile",
                            "anyOf": [
                              { "type": "string", "format": "uri" },
                              { "type": "null" }
                            ]
                          },
                          "name": {
                            "description": "Author name or identifier",
                            "anyOf": [{ "type": "string" }, { "type": "null" }]
                          },
                          "email": {
                            "description": "Author email address",
                            "anyOf": [
                              {
                                "type": "string",
                                "format": "email",
                                "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                              },
                              { "type": "null" }
                            ]
                          },
                          "first_seen": {
                            "description": "Timestamp when author first appeared",
                            "type": "number"
                          },
                          "last_seen": {
                            "description": "Timestamp of last activity",
                            "type": "number"
                          },
                          "last_incident": {
                            "description": "Timestamp of last incident",
                            "anyOf": [{ "type": "number" }, { "type": "null" }]
                          },
                          "status": {
                            "description": "Current author status",
                            "type": "string",
                            "enum": ["enabled", "suspended", "blocked"]
                          },
                          "trust_level": {
                            "type": "object",
                            "properties": {
                              "level": {
                                "description": "Author trust level (-1, 0, 1, 2, 3, or 4)",
                                "type": "number"
                              },
                              "manual": {
                                "description": "True if the trust level was set manually by a moderator",
                                "type": "boolean"
                              }
                            },
                            "required": ["level", "manual"],
                            "additionalProperties": false
                          },
                          "block": {
                            "description": "Block or suspension details, if applicable. Null if the author is enabled.",
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "until": {
                                    "description": "The timestamp until which they are blocked if the author is suspended.",
                                    "anyOf": [
                                      { "type": "number" },
                                      { "type": "null" }
                                    ]
                                  },
                                  "reason": {
                                    "description": "The moderators reason why the author was blocked or suspended.",
                                    "anyOf": [
                                      { "type": "string" },
                                      { "type": "null" }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              { "type": "null" }
                            ]
                          },
                          "risk_evaluation": {
                            "description": "Risk assessment details, if available.",
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "risk_level": {
                                    "description": "Calculated risk level based on more than 10 behavioral signals.",
                                    "anyOf": [
                                      {
                                        "type": "number",
                                        "minimum": 0,
                                        "maximum": 100
                                      },
                                      { "type": "null" }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              { "type": "null" }
                            ]
                          },
                          "metrics": {
                            "type": "object",
                            "properties": {
                              "total_content": {
                                "description": "Total pieces of content",
                                "type": "number"
                              },
                              "flagged_content": {
                                "description": "Number of flagged content pieces",
                                "type": "number"
                              },
                              "average_sentiment": {
                                "description": "Average sentiment score of content (-1 to 1). Requires a sentiment model in your project.",
                                "anyOf": [
                                  { "type": "number" },
                                  { "type": "null" }
                                ]
                              }
                            },
                            "required": ["total_content", "flagged_content"],
                            "additionalProperties": false
                          },
                          "metadata": {
                            "description": "Additional metadata provided by your system. We recommend including any relevant information that may assist in the moderation process.",
                            "type": "object",
                            "properties": {
                              "email_verified": {
                                "description": "Whether the author's email is verified",
                                "anyOf": [
                                  { "type": "boolean" },
                                  { "type": "null" }
                                ]
                              },
                              "phone_verified": {
                                "description": "Whether the author's phone number is verified",
                                "anyOf": [
                                  { "type": "boolean" },
                                  { "type": "null" }
                                ]
                              },
                              "identity_verified": {
                                "description": "Whether the author's identity is verified",
                                "anyOf": [
                                  { "type": "boolean" },
                                  { "type": "null" }
                                ]
                              },
                              "is_paying_customer": {
                                "description": "Whether the author is a paying customer",
                                "anyOf": [
                                  { "type": "boolean" },
                                  { "type": "null" }
                                ]
                              }
                            },
                            "additionalProperties": {}
                          }
                        },
                        "required": [
                          "id",
                          "first_seen",
                          "last_seen",
                          "status",
                          "trust_level",
                          "block",
                          "risk_evaluation",
                          "metrics",
                          "metadata"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": { "type": "number" },
                        "pageSize": { "type": "number" },
                        "pageNumber": { "type": "number" },
                        "hasNextPage": { "type": "boolean" },
                        "hasPreviousPage": { "type": "boolean" }
                      },
                      "required": [
                        "total",
                        "pageSize",
                        "pageNumber",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": ["authors", "pagination"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "author-openCreate",
        "summary": "Create a new author",
        "description": "Create a new author. Typically not needed as authors are created automatically when content is moderated.",
        "tags": ["author"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile_picture": {
                    "description": "URL of the author's profile picture",
                    "anyOf": [
                      { "type": "string", "format": "uri" },
                      { "type": "null" }
                    ]
                  },
                  "external_link": {
                    "description": "URL of the author's external profile",
                    "anyOf": [
                      { "type": "string", "format": "uri" },
                      { "type": "null" }
                    ]
                  },
                  "name": {
                    "description": "Author name or identifier",
                    "anyOf": [{ "type": "string" }, { "type": "null" }]
                  },
                  "email": {
                    "description": "Author email address",
                    "anyOf": [
                      {
                        "type": "string",
                        "format": "email",
                        "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                      },
                      { "type": "null" }
                    ]
                  },
                  "metadata": {
                    "description": "Additional metadata provided by your system. We recommend including any relevant information that may assist in the moderation process.",
                    "type": "object",
                    "properties": {
                      "email_verified": {
                        "description": "Whether the author's email is verified",
                        "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                      },
                      "phone_verified": {
                        "description": "Whether the author's phone number is verified",
                        "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                      },
                      "identity_verified": {
                        "description": "Whether the author's identity is verified",
                        "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                      },
                      "is_paying_customer": {
                        "description": "Whether the author is a paying customer",
                        "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                      }
                    },
                    "additionalProperties": {}
                  },
                  "first_seen": {
                    "description": "Timestamp when author first appeared",
                    "type": "number"
                  },
                  "last_seen": {
                    "description": "Timestamp of last activity",
                    "type": "number"
                  },
                  "manual_trust_level": {
                    "anyOf": [
                      { "type": "number", "minimum": -1, "maximum": 4 },
                      { "type": "null" }
                    ]
                  },
                  "external_id": {
                    "description": "External ID of the user, typically the ID of the author in your database.",
                    "type": "string"
                  }
                },
                "required": ["external_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Author ID in Moderation API",
                      "type": "string"
                    },
                    "external_id": {
                      "description": "The author's ID from your system",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "profile_picture": {
                      "description": "URL of the author's profile picture",
                      "anyOf": [
                        { "type": "string", "format": "uri" },
                        { "type": "null" }
                      ]
                    },
                    "external_link": {
                      "description": "URL of the author's external profile",
                      "anyOf": [
                        { "type": "string", "format": "uri" },
                        { "type": "null" }
                      ]
                    },
                    "name": {
                      "description": "Author name or identifier",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "email": {
                      "description": "Author email address",
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "email",
                          "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                        },
                        { "type": "null" }
                      ]
                    },
                    "first_seen": {
                      "description": "Timestamp when author first appeared",
                      "type": "number"
                    },
                    "last_seen": {
                      "description": "Timestamp of last activity",
                      "type": "number"
                    },
                    "last_incident": {
                      "description": "Timestamp of last incident",
                      "anyOf": [{ "type": "number" }, { "type": "null" }]
                    },
                    "status": {
                      "description": "Current author status",
                      "type": "string",
                      "enum": ["enabled", "suspended", "blocked"]
                    },
                    "trust_level": {
                      "type": "object",
                      "properties": {
                        "level": {
                          "description": "Author trust level (-1, 0, 1, 2, 3, or 4)",
                          "type": "number"
                        },
                        "manual": {
                          "description": "True if the trust level was set manually by a moderator",
                          "type": "boolean"
                        }
                      },
                      "required": ["level", "manual"],
                      "additionalProperties": false
                    },
                    "block": {
                      "description": "Block or suspension details, if applicable. Null if the author is enabled.",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "until": {
                              "description": "The timestamp until which they are blocked if the author is suspended.",
                              "anyOf": [
                                { "type": "number" },
                                { "type": "null" }
                              ]
                            },
                            "reason": {
                              "description": "The moderators reason why the author was blocked or suspended.",
                              "anyOf": [
                                { "type": "string" },
                                { "type": "null" }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        { "type": "null" }
                      ]
                    },
                    "risk_evaluation": {
                      "description": "Risk assessment details, if available.",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "risk_level": {
                              "description": "Calculated risk level based on more than 10 behavioral signals.",
                              "anyOf": [
                                {
                                  "type": "number",
                                  "minimum": 0,
                                  "maximum": 100
                                },
                                { "type": "null" }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        { "type": "null" }
                      ]
                    },
                    "metrics": {
                      "type": "object",
                      "properties": {
                        "total_content": {
                          "description": "Total pieces of content",
                          "type": "number"
                        },
                        "flagged_content": {
                          "description": "Number of flagged content pieces",
                          "type": "number"
                        },
                        "average_sentiment": {
                          "description": "Average sentiment score of content (-1 to 1). Requires a sentiment model in your project.",
                          "anyOf": [{ "type": "number" }, { "type": "null" }]
                        }
                      },
                      "required": ["total_content", "flagged_content"],
                      "additionalProperties": false
                    },
                    "metadata": {
                      "description": "Additional metadata provided by your system. We recommend including any relevant information that may assist in the moderation process.",
                      "type": "object",
                      "properties": {
                        "email_verified": {
                          "description": "Whether the author's email is verified",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        },
                        "phone_verified": {
                          "description": "Whether the author's phone number is verified",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        },
                        "identity_verified": {
                          "description": "Whether the author's identity is verified",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        },
                        "is_paying_customer": {
                          "description": "Whether the author is a paying customer",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        }
                      },
                      "additionalProperties": {}
                    }
                  },
                  "required": [
                    "id",
                    "first_seen",
                    "last_seen",
                    "status",
                    "trust_level",
                    "block",
                    "risk_evaluation",
                    "metrics",
                    "metadata"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/authors/{id}": {
      "get": {
        "operationId": "author-openGetAuthorDetails",
        "summary": "Get author details",
        "description": "Get detailed information about a specific author including historical data and analysis",
        "tags": ["author"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "description": "Either external ID or the ID assigned by moderation API.",
              "type": "string"
            },
            "required": true,
            "description": "Either external ID or the ID assigned by moderation API."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Author ID in Moderation API",
                      "type": "string"
                    },
                    "external_id": {
                      "description": "The author's ID from your system",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "profile_picture": {
                      "description": "URL of the author's profile picture",
                      "anyOf": [
                        { "type": "string", "format": "uri" },
                        { "type": "null" }
                      ]
                    },
                    "external_link": {
                      "description": "URL of the author's external profile",
                      "anyOf": [
                        { "type": "string", "format": "uri" },
                        { "type": "null" }
                      ]
                    },
                    "name": {
                      "description": "Author name or identifier",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "email": {
                      "description": "Author email address",
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "email",
                          "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                        },
                        { "type": "null" }
                      ]
                    },
                    "first_seen": {
                      "description": "Timestamp when author first appeared",
                      "type": "number"
                    },
                    "last_seen": {
                      "description": "Timestamp of last activity",
                      "type": "number"
                    },
                    "last_incident": {
                      "description": "Timestamp of last incident",
                      "anyOf": [{ "type": "number" }, { "type": "null" }]
                    },
                    "status": {
                      "description": "Current author status",
                      "type": "string",
                      "enum": ["enabled", "suspended", "blocked"]
                    },
                    "trust_level": {
                      "type": "object",
                      "properties": {
                        "level": {
                          "description": "Author trust level (-1, 0, 1, 2, 3, or 4)",
                          "type": "number"
                        },
                        "manual": {
                          "description": "True if the trust level was set manually by a moderator",
                          "type": "boolean"
                        }
                      },
                      "required": ["level", "manual"],
                      "additionalProperties": false
                    },
                    "block": {
                      "description": "Block or suspension details, if applicable. Null if the author is enabled.",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "until": {
                              "description": "The timestamp until which they are blocked if the author is suspended.",
                              "anyOf": [
                                { "type": "number" },
                                { "type": "null" }
                              ]
                            },
                            "reason": {
                              "description": "The moderators reason why the author was blocked or suspended.",
                              "anyOf": [
                                { "type": "string" },
                                { "type": "null" }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        { "type": "null" }
                      ]
                    },
                    "risk_evaluation": {
                      "description": "Risk assessment details, if available.",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "risk_level": {
                              "description": "Calculated risk level based on more than 10 behavioral signals.",
                              "anyOf": [
                                {
                                  "type": "number",
                                  "minimum": 0,
                                  "maximum": 100
                                },
                                { "type": "null" }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        { "type": "null" }
                      ]
                    },
                    "metrics": {
                      "type": "object",
                      "properties": {
                        "total_content": {
                          "description": "Total pieces of content",
                          "type": "number"
                        },
                        "flagged_content": {
                          "description": "Number of flagged content pieces",
                          "type": "number"
                        },
                        "average_sentiment": {
                          "description": "Average sentiment score of content (-1 to 1). Requires a sentiment model in your project.",
                          "anyOf": [{ "type": "number" }, { "type": "null" }]
                        }
                      },
                      "required": ["total_content", "flagged_content"],
                      "additionalProperties": false
                    },
                    "metadata": {
                      "description": "Additional metadata provided by your system. We recommend including any relevant information that may assist in the moderation process.",
                      "type": "object",
                      "properties": {
                        "email_verified": {
                          "description": "Whether the author's email is verified",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        },
                        "phone_verified": {
                          "description": "Whether the author's phone number is verified",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        },
                        "identity_verified": {
                          "description": "Whether the author's identity is verified",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        },
                        "is_paying_customer": {
                          "description": "Whether the author is a paying customer",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        }
                      },
                      "additionalProperties": {}
                    }
                  },
                  "required": [
                    "id",
                    "first_seen",
                    "last_seen",
                    "status",
                    "trust_level",
                    "block",
                    "risk_evaluation",
                    "metrics",
                    "metadata"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "author-openUpdate",
        "summary": "Update author details",
        "description": "Update the details of a specific author",
        "tags": ["author"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "description": "Either external ID or the ID assigned by moderation API.",
              "type": "string"
            },
            "required": true,
            "description": "Either external ID or the ID assigned by moderation API."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile_picture": {
                    "description": "URL of the author's profile picture",
                    "anyOf": [
                      { "type": "string", "format": "uri" },
                      { "type": "null" }
                    ]
                  },
                  "external_link": {
                    "description": "URL of the author's external profile",
                    "anyOf": [
                      { "type": "string", "format": "uri" },
                      { "type": "null" }
                    ]
                  },
                  "name": {
                    "description": "Author name or identifier",
                    "anyOf": [{ "type": "string" }, { "type": "null" }]
                  },
                  "email": {
                    "description": "Author email address",
                    "anyOf": [
                      {
                        "type": "string",
                        "format": "email",
                        "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                      },
                      { "type": "null" }
                    ]
                  },
                  "metadata": {
                    "description": "Additional metadata provided by your system. We recommend including any relevant information that may assist in the moderation process.",
                    "type": "object",
                    "properties": {
                      "email_verified": {
                        "description": "Whether the author's email is verified",
                        "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                      },
                      "phone_verified": {
                        "description": "Whether the author's phone number is verified",
                        "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                      },
                      "identity_verified": {
                        "description": "Whether the author's identity is verified",
                        "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                      },
                      "is_paying_customer": {
                        "description": "Whether the author is a paying customer",
                        "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                      }
                    },
                    "additionalProperties": {}
                  },
                  "first_seen": {
                    "description": "Timestamp when author first appeared",
                    "type": "number"
                  },
                  "last_seen": {
                    "description": "Timestamp of last activity",
                    "type": "number"
                  },
                  "manual_trust_level": {
                    "anyOf": [
                      { "type": "number", "minimum": -1, "maximum": 4 },
                      { "type": "null" }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Author ID in Moderation API",
                      "type": "string"
                    },
                    "external_id": {
                      "description": "The author's ID from your system",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "profile_picture": {
                      "description": "URL of the author's profile picture",
                      "anyOf": [
                        { "type": "string", "format": "uri" },
                        { "type": "null" }
                      ]
                    },
                    "external_link": {
                      "description": "URL of the author's external profile",
                      "anyOf": [
                        { "type": "string", "format": "uri" },
                        { "type": "null" }
                      ]
                    },
                    "name": {
                      "description": "Author name or identifier",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "email": {
                      "description": "Author email address",
                      "anyOf": [
                        {
                          "type": "string",
                          "format": "email",
                          "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                        },
                        { "type": "null" }
                      ]
                    },
                    "first_seen": {
                      "description": "Timestamp when author first appeared",
                      "type": "number"
                    },
                    "last_seen": {
                      "description": "Timestamp of last activity",
                      "type": "number"
                    },
                    "last_incident": {
                      "description": "Timestamp of last incident",
                      "anyOf": [{ "type": "number" }, { "type": "null" }]
                    },
                    "status": {
                      "description": "Current author status",
                      "type": "string",
                      "enum": ["enabled", "suspended", "blocked"]
                    },
                    "trust_level": {
                      "type": "object",
                      "properties": {
                        "level": {
                          "description": "Author trust level (-1, 0, 1, 2, 3, or 4)",
                          "type": "number"
                        },
                        "manual": {
                          "description": "True if the trust level was set manually by a moderator",
                          "type": "boolean"
                        }
                      },
                      "required": ["level", "manual"],
                      "additionalProperties": false
                    },
                    "block": {
                      "description": "Block or suspension details, if applicable. Null if the author is enabled.",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "until": {
                              "description": "The timestamp until which they are blocked if the author is suspended.",
                              "anyOf": [
                                { "type": "number" },
                                { "type": "null" }
                              ]
                            },
                            "reason": {
                              "description": "The moderators reason why the author was blocked or suspended.",
                              "anyOf": [
                                { "type": "string" },
                                { "type": "null" }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        { "type": "null" }
                      ]
                    },
                    "risk_evaluation": {
                      "description": "Risk assessment details, if available.",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "risk_level": {
                              "description": "Calculated risk level based on more than 10 behavioral signals.",
                              "anyOf": [
                                {
                                  "type": "number",
                                  "minimum": 0,
                                  "maximum": 100
                                },
                                { "type": "null" }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        { "type": "null" }
                      ]
                    },
                    "metrics": {
                      "type": "object",
                      "properties": {
                        "total_content": {
                          "description": "Total pieces of content",
                          "type": "number"
                        },
                        "flagged_content": {
                          "description": "Number of flagged content pieces",
                          "type": "number"
                        },
                        "average_sentiment": {
                          "description": "Average sentiment score of content (-1 to 1). Requires a sentiment model in your project.",
                          "anyOf": [{ "type": "number" }, { "type": "null" }]
                        }
                      },
                      "required": ["total_content", "flagged_content"],
                      "additionalProperties": false
                    },
                    "metadata": {
                      "description": "Additional metadata provided by your system. We recommend including any relevant information that may assist in the moderation process.",
                      "type": "object",
                      "properties": {
                        "email_verified": {
                          "description": "Whether the author's email is verified",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        },
                        "phone_verified": {
                          "description": "Whether the author's phone number is verified",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        },
                        "identity_verified": {
                          "description": "Whether the author's identity is verified",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        },
                        "is_paying_customer": {
                          "description": "Whether the author is a paying customer",
                          "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                        }
                      },
                      "additionalProperties": {}
                    }
                  },
                  "required": [
                    "id",
                    "first_seen",
                    "last_seen",
                    "status",
                    "trust_level",
                    "block",
                    "risk_evaluation",
                    "metrics",
                    "metadata"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "author-delete",
        "summary": "Delete an author",
        "description": "Delete a specific author",
        "tags": ["author"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" } },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/queue/{id}": {
      "get": {
        "operationId": "queueView-openGetQueue",
        "summary": "Get a queue",
        "description": "Get a queue",
        "tags": ["review-queues"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "description": "The queue ID", "type": "string" },
            "required": true,
            "description": "The queue ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "queue": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "description": { "type": "string" },
                        "filter": {
                          "type": "object",
                          "properties": {
                            "contextIDs": {
                              "type": "array",
                              "items": {
                                "anyOf": [
                                  { "type": "string" },
                                  { "type": "null" }
                                ]
                              }
                            },
                            "filterLabels": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "label": { "type": "string" },
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "FLAGGED",
                                      "NOT_FLAGGED",
                                      "THRESHOLDS"
                                    ]
                                  },
                                  "minThreshold": {
                                    "anyOf": [
                                      {
                                        "type": "number",
                                        "minimum": 0,
                                        "maximum": 100
                                      },
                                      { "type": "null" }
                                    ]
                                  },
                                  "maxThreshold": {
                                    "anyOf": [
                                      {
                                        "type": "number",
                                        "minimum": 0,
                                        "maximum": 100
                                      },
                                      { "type": "null" }
                                    ]
                                  }
                                },
                                "required": ["label", "type"],
                                "additionalProperties": false
                              }
                            },
                            "labels": {
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "afterDate": { "type": "string" },
                            "beforeDate": { "type": "string" },
                            "showChecked": { "type": "boolean" },
                            "authorID": { "type": "string" },
                            "filteredActionIDs": {
                              "type": "array",
                              "items": { "type": "string" }
                            }
                          },
                          "additionalProperties": false
                        },
                        "unresolvedItemsCount": { "type": "number" },
                        "resolvedItemsCount": { "type": "number" },
                        "totalItemsCount": { "type": "number" }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "filter",
                        "unresolvedItemsCount",
                        "resolvedItemsCount",
                        "totalItemsCount"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": ["queue"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/queue/{id}/stats": {
      "get": {
        "operationId": "queueView-openGetStats",
        "summary": "Get queue statistics",
        "description": "Get detailed statistics about a moderation queue including review times, action counts, and trends",
        "tags": ["review-queues"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "description": "The queue ID", "type": "string" },
            "required": true,
            "description": "The queue ID"
          },
          {
            "in": "query",
            "name": "withinDays",
            "schema": {
              "description": "Number of days to analyze statistics for",
              "default": "30",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reviewStats": {
                      "type": "object",
                      "properties": {
                        "averageTimeToReview": {
                          "description": "Average time in milliseconds to review an item",
                          "type": "number"
                        },
                        "totalReviewed": {
                          "description": "Total number of items reviewed",
                          "type": "number"
                        },
                        "totalPending": {
                          "description": "Total number of items pending review",
                          "type": "number"
                        }
                      },
                      "required": [
                        "averageTimeToReview",
                        "totalReviewed",
                        "totalPending"
                      ],
                      "additionalProperties": false
                    },
                    "actionStats": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "actionId": {
                            "description": "ID of the moderation action",
                            "type": "string"
                          },
                          "actionName": {
                            "description": "Name of the moderation action",
                            "type": "string"
                          },
                          "count": {
                            "description": "Number of times this action was taken",
                            "type": "number"
                          },
                          "percentageOfTotal": {
                            "description": "Percentage this action represents of all actions",
                            "type": "number"
                          }
                        },
                        "required": [
                          "actionId",
                          "actionName",
                          "count",
                          "percentageOfTotal"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "topReviewers": {
                      "description": "List of top reviewers and their statistics",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": {
                            "description": "ID of the reviewer",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the reviewer",
                            "type": "string"
                          },
                          "reviewCount": {
                            "description": "Number of items reviewed",
                            "type": "number"
                          },
                          "averageTimePerReview": {
                            "description": "Average review time in milliseconds",
                            "type": "number"
                          },
                          "accuracyScore": {
                            "description": "Optional accuracy score based on review quality metrics",
                            "type": "number"
                          },
                          "topActions": {
                            "description": "Most common actions taken by this reviewer",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "actionId": {
                                  "description": "Most used action by this reviewer",
                                  "type": "string"
                                },
                                "actionName": {
                                  "description": "Name of the most used action",
                                  "type": "string"
                                },
                                "count": {
                                  "description": "Number of times this action was used",
                                  "type": "number"
                                }
                              },
                              "required": ["actionId", "actionName", "count"],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": [
                          "userId",
                          "name",
                          "reviewCount",
                          "averageTimePerReview",
                          "topActions"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "trends": {
                      "type": "object",
                      "properties": {
                        "dailyReviewCounts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "date": {
                                "description": "Date in YYYY-MM-DD format",
                                "type": "string"
                              },
                              "count": {
                                "description": "Number of reviews on this date",
                                "type": "number"
                              }
                            },
                            "required": ["date", "count"],
                            "additionalProperties": false
                          }
                        },
                        "flaggedContentTrends": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "description": "Content flag/label",
                                "type": "string"
                              },
                              "trend": {
                                "description": "Trend indicator (-1 to 1) showing if this type of flagged content is increasing or decreasing",
                                "type": "number"
                              }
                            },
                            "required": ["label", "trend"],
                            "additionalProperties": false
                          }
                        }
                      },
                      "required": ["dailyReviewCounts", "flaggedContentTrends"],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "reviewStats",
                    "actionStats",
                    "topReviewers",
                    "trends"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/queue/{id}/items": {
      "get": {
        "operationId": "queueView-openGetItems",
        "summary": "Get queue items",
        "description": "Get paginated list of items in a moderation queue with filtering options",
        "tags": ["review-queues"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "description": "The queue ID", "type": "string" },
            "required": true,
            "description": "The queue ID"
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "description": "Number of items per page",
              "default": "20",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "description": "Page number to fetch",
              "default": "1",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortField",
            "schema": {
              "type": "string",
              "enum": ["createdAt", "severity", "reviewedAt"]
            }
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "description": "Sort direction",
              "default": "desc",
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "in": "query",
            "name": "contextIds",
            "schema": { "type": "string" }
          },
          { "in": "query", "name": "labels", "schema": { "type": "string" } },
          {
            "in": "query",
            "name": "afterDate",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "beforeDate",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "includeResolved",
            "schema": { "type": "string" }
          },
          { "in": "query", "name": "authorId", "schema": { "type": "string" } },
          {
            "in": "query",
            "name": "filteredActionIds",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Content ID",
                            "type": "string"
                          },
                          "content": {
                            "description": "The content to be moderated",
                            "type": "string"
                          },
                          "language": {
                            "description": "Content language",
                            "type": "string"
                          },
                          "labels": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "label": {
                                  "description": "Label name",
                                  "type": "string"
                                },
                                "score": {
                                  "description": "Confidence score of the label",
                                  "type": "number"
                                },
                                "flagged": {
                                  "description": "Whether this label caused a flag",
                                  "type": "boolean"
                                }
                              },
                              "required": ["label", "score", "flagged"],
                              "additionalProperties": false
                            }
                          },
                          "contextId": {
                            "description": "Context ID",
                            "type": "string"
                          },
                          "authorId": {
                            "description": "Author ID",
                            "type": "string"
                          },
                          "actions": {
                            "description": "Action IDs taken on this item",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Action ID",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Action name",
                                  "type": "string"
                                },
                                "comment": {
                                  "description": "Action comment",
                                  "type": "string"
                                },
                                "timestamp": {
                                  "description": "Unix timestamp of when the action was taken",
                                  "type": "number"
                                },
                                "reviewer": {
                                  "description": "Moderator userID",
                                  "type": "string"
                                }
                              },
                              "required": ["id", "name", "timestamp"],
                              "additionalProperties": false
                            }
                          },
                          "flagged": {
                            "description": "Whether the item is flagged by any label",
                            "type": "boolean"
                          },
                          "status": {
                            "description": "Status of the item",
                            "type": "string",
                            "enum": ["pending", "resolved"]
                          },
                          "timestamp": {
                            "description": "Unix timestamp of when the item was created",
                            "type": "number"
                          },
                          "objectType": {
                            "description": "Type of the content object",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "content",
                          "labels",
                          "flagged",
                          "status",
                          "timestamp"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "totalItems": { "type": "number" },
                        "totalPages": { "type": "number" },
                        "currentPage": { "type": "number" },
                        "hasNextPage": { "type": "boolean" },
                        "hasPreviousPage": { "type": "boolean" }
                      },
                      "required": [
                        "totalItems",
                        "totalPages",
                        "currentPage",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": ["items", "pagination"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/queue/{id}/items/{itemId}/resolve": {
      "post": {
        "operationId": "queueView-openResolveItem",
        "summary": "Resolve a queue item",
        "description": "Mark a queue item as resolved with a specific moderation action",
        "tags": ["review-queues"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "description": "The queue ID", "type": "string" },
            "required": true,
            "description": "The queue ID"
          },
          {
            "in": "path",
            "name": "itemId",
            "schema": {
              "description": "The item ID to resolve",
              "type": "string"
            },
            "required": true,
            "description": "The item ID to resolve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "description": "Optional comment",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "resolvedAt": {
                      "description": "Timestamp when the item was resolved",
                      "type": "string"
                    },
                    "comment": {
                      "description": "Optional comment",
                      "type": "string"
                    }
                  },
                  "required": ["success", "resolvedAt"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/queue/{id}/items/{itemId}/unresolve": {
      "post": {
        "operationId": "queueView-openUnresolveItem",
        "summary": "Unresolve a queue item",
        "description": "Mark a previously resolved queue item as unresolved/pending",
        "tags": ["review-queues"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "description": "The queue ID", "type": "string" },
            "required": true,
            "description": "The queue ID"
          },
          {
            "in": "path",
            "name": "itemId",
            "schema": {
              "description": "The item ID to unresolve",
              "type": "string"
            },
            "required": true,
            "description": "The item ID to unresolve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "description": "Optional reason for unresolving the item",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "status": {
                      "description": "New status of the item",
                      "type": "string"
                    },
                    "unresolvedAt": {
                      "description": "Timestamp when the item was unresolved",
                      "type": "string"
                    }
                  },
                  "required": ["success", "status", "unresolvedAt"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/actions": {
      "get": {
        "operationId": "actions-list",
        "summary": "List moderation actions",
        "description": "List all available moderation actions for the authenticated organization.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          { "in": "query", "name": "queueId", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of moderation actions with their associated webhooks",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "The ID of the action.",
                        "type": "string"
                      },
                      "key": {
                        "description": "User defined key of the action.",
                        "anyOf": [{ "type": "string" }, { "type": "null" }]
                      },
                      "createdAt": {
                        "description": "The date the action was created.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the action.",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the action.",
                        "anyOf": [{ "type": "string" }, { "type": "null" }]
                      },
                      "type": {
                        "description": "The type of the action.",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "AUTHOR_BLOCK",
                              "AUTHOR_BLOCK_TEMP",
                              "AUTHOR_UNBLOCK",
                              "AUTHOR_DELETE",
                              "AUTHOR_REPORT",
                              "AUTHOR_WARN",
                              "AUTHOR_CUSTOM",
                              "ITEM_CUSTOM"
                            ]
                          },
                          { "type": "null" }
                        ]
                      },
                      "builtIn": {
                        "description": "Whether the action is a built-in action or a custom one.",
                        "default": false,
                        "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                      },
                      "queueBehaviour": {
                        "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.",
                        "default": "NO_CHANGE",
                        "type": "string",
                        "enum": ["REMOVE", "ADD", "NO_CHANGE"]
                      },
                      "filterInQueueIds": {
                        "description": "The IDs of the queues the action is available in.",
                        "default": [],
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "position": {
                        "description": "Show the action in all queues, selected queues or no queues (to use via API only).",
                        "default": "ALL_QUEUES",
                        "type": "string",
                        "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"]
                      },
                      "possibleValues": {
                        "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action.",
                        "default": [],
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "description": "The value of the action.",
                              "type": "string"
                            }
                          },
                          "required": ["value"],
                          "additionalProperties": false
                        }
                      },
                      "valueRequired": {
                        "description": "Whether the action requires a value to be executed.",
                        "default": false,
                        "type": "boolean"
                      },
                      "freeText": {
                        "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values.",
                        "default": false,
                        "type": "boolean"
                      },
                      "webhooks": {
                        "description": "The action's webhooks.",
                        "default": [],
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "The webhook's name, used to identify it in the dashboard",
                              "type": "string"
                            },
                            "description": {
                              "description": "The webhook's description",
                              "anyOf": [
                                { "type": "string" },
                                { "type": "null" }
                              ]
                            },
                            "url": {
                              "description": "The webhook's URL. We'll call this URL when the event occurs.",
                              "type": "string",
                              "format": "uri"
                            },
                            "moderationActionId": {
                              "description": "The ID of the moderation action to trigger the webhook on. Only used for moderation action webhooks.",
                              "anyOf": [
                                { "type": "string" },
                                { "type": "null" }
                              ]
                            },
                            "id": {
                              "description": "The ID of the webhook.",
                              "type": "string"
                            }
                          },
                          "required": ["name", "url", "id"],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": [
                      "id",
                      "createdAt",
                      "name",
                      "builtIn",
                      "queueBehaviour",
                      "filterInQueueIds",
                      "position",
                      "possibleValues",
                      "valueRequired",
                      "freeText",
                      "webhooks"
                    ],
                    "additionalProperties": false
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "actions-create",
        "summary": "Create an action",
        "description": "Create an action.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "User defined key of the action.",
                    "anyOf": [{ "type": "string" }, { "type": "null" }]
                  },
                  "name": {
                    "description": "The name of the action.",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the action.",
                    "anyOf": [{ "type": "string" }, { "type": "null" }]
                  },
                  "type": {
                    "description": "The type of the action.",
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "AUTHOR_BLOCK",
                          "AUTHOR_BLOCK_TEMP",
                          "AUTHOR_UNBLOCK",
                          "AUTHOR_DELETE",
                          "AUTHOR_REPORT",
                          "AUTHOR_WARN",
                          "AUTHOR_CUSTOM",
                          "ITEM_CUSTOM"
                        ]
                      },
                      { "type": "null" }
                    ]
                  },
                  "builtIn": {
                    "description": "Whether the action is a built-in action or a custom one.",
                    "default": false,
                    "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                  },
                  "queueBehaviour": {
                    "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.",
                    "default": "NO_CHANGE",
                    "type": "string",
                    "enum": ["REMOVE", "ADD", "NO_CHANGE"]
                  },
                  "filterInQueueIds": {
                    "description": "The IDs of the queues the action is available in.",
                    "default": [],
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "position": {
                    "description": "Show the action in all queues, selected queues or no queues (to use via API only).",
                    "default": "ALL_QUEUES",
                    "type": "string",
                    "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"]
                  },
                  "possibleValues": {
                    "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action.",
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "description": "The value of the action.",
                          "type": "string"
                        }
                      },
                      "required": ["value"]
                    }
                  },
                  "valueRequired": {
                    "description": "Whether the action requires a value to be executed.",
                    "default": false,
                    "type": "boolean"
                  },
                  "freeText": {
                    "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values.",
                    "default": false,
                    "type": "boolean"
                  },
                  "webhooks": {
                    "description": "The action's webhooks.",
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The webhook's name, used to identify it in the dashboard",
                          "type": "string"
                        },
                        "description": {
                          "description": "The webhook's description",
                          "anyOf": [{ "type": "string" }, { "type": "null" }]
                        },
                        "url": {
                          "description": "The webhook's URL. We'll call this URL when the event occurs.",
                          "type": "string",
                          "format": "uri"
                        },
                        "id": {
                          "description": "ID of an existing webhook or undefined if this is a new webhook.",
                          "type": "string"
                        }
                      },
                      "required": ["name", "url"]
                    }
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the action.",
                      "type": "string"
                    },
                    "key": {
                      "description": "User defined key of the action.",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "createdAt": {
                      "description": "The date the action was created.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the action.",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the action.",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "type": {
                      "description": "The type of the action.",
                      "anyOf": [
                        {
                          "type": "string",
                          "enum": [
                            "AUTHOR_BLOCK",
                            "AUTHOR_BLOCK_TEMP",
                            "AUTHOR_UNBLOCK",
                            "AUTHOR_DELETE",
                            "AUTHOR_REPORT",
                            "AUTHOR_WARN",
                            "AUTHOR_CUSTOM",
                            "ITEM_CUSTOM"
                          ]
                        },
                        { "type": "null" }
                      ]
                    },
                    "builtIn": {
                      "description": "Whether the action is a built-in action or a custom one.",
                      "default": false,
                      "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                    },
                    "queueBehaviour": {
                      "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.",
                      "default": "NO_CHANGE",
                      "type": "string",
                      "enum": ["REMOVE", "ADD", "NO_CHANGE"]
                    },
                    "filterInQueueIds": {
                      "description": "The IDs of the queues the action is available in.",
                      "default": [],
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "position": {
                      "description": "Show the action in all queues, selected queues or no queues (to use via API only).",
                      "default": "ALL_QUEUES",
                      "type": "string",
                      "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"]
                    },
                    "possibleValues": {
                      "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action.",
                      "default": [],
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "description": "The value of the action.",
                            "type": "string"
                          }
                        },
                        "required": ["value"],
                        "additionalProperties": false
                      }
                    },
                    "valueRequired": {
                      "description": "Whether the action requires a value to be executed.",
                      "default": false,
                      "type": "boolean"
                    },
                    "freeText": {
                      "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values.",
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "name",
                    "builtIn",
                    "queueBehaviour",
                    "filterInQueueIds",
                    "position",
                    "possibleValues",
                    "valueRequired",
                    "freeText"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "409": {
            "description": "Action with this key already exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.CONFLICT" }
              }
            }
          }
        }
      }
    },
    "/actions/{id}": {
      "get": {
        "operationId": "actions-get",
        "summary": "Get an action",
        "description": "Get an action by ID.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "description": "The ID of the action to get.",
              "type": "string"
            },
            "required": true,
            "description": "The ID of the action to get."
          }
        ],
        "responses": {
          "200": {
            "description": "Action retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the action.",
                      "type": "string"
                    },
                    "key": {
                      "description": "User defined key of the action.",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "createdAt": {
                      "description": "The date the action was created.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the action.",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the action.",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "type": {
                      "description": "The type of the action.",
                      "anyOf": [
                        {
                          "type": "string",
                          "enum": [
                            "AUTHOR_BLOCK",
                            "AUTHOR_BLOCK_TEMP",
                            "AUTHOR_UNBLOCK",
                            "AUTHOR_DELETE",
                            "AUTHOR_REPORT",
                            "AUTHOR_WARN",
                            "AUTHOR_CUSTOM",
                            "ITEM_CUSTOM"
                          ]
                        },
                        { "type": "null" }
                      ]
                    },
                    "builtIn": {
                      "description": "Whether the action is a built-in action or a custom one.",
                      "default": false,
                      "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                    },
                    "queueBehaviour": {
                      "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.",
                      "default": "NO_CHANGE",
                      "type": "string",
                      "enum": ["REMOVE", "ADD", "NO_CHANGE"]
                    },
                    "filterInQueueIds": {
                      "description": "The IDs of the queues the action is available in.",
                      "default": [],
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "position": {
                      "description": "Show the action in all queues, selected queues or no queues (to use via API only).",
                      "default": "ALL_QUEUES",
                      "type": "string",
                      "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"]
                    },
                    "possibleValues": {
                      "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action.",
                      "default": [],
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "description": "The value of the action.",
                            "type": "string"
                          }
                        },
                        "required": ["value"],
                        "additionalProperties": false
                      }
                    },
                    "valueRequired": {
                      "description": "Whether the action requires a value to be executed.",
                      "default": false,
                      "type": "boolean"
                    },
                    "freeText": {
                      "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values.",
                      "default": false,
                      "type": "boolean"
                    },
                    "webhooks": {
                      "description": "The action's webhooks.",
                      "default": [],
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "The webhook's name, used to identify it in the dashboard",
                            "type": "string"
                          },
                          "description": {
                            "description": "The webhook's description",
                            "anyOf": [{ "type": "string" }, { "type": "null" }]
                          },
                          "url": {
                            "description": "The webhook's URL. We'll call this URL when the event occurs.",
                            "type": "string",
                            "format": "uri"
                          },
                          "moderationActionId": {
                            "description": "The ID of the moderation action to trigger the webhook on. Only used for moderation action webhooks.",
                            "anyOf": [{ "type": "string" }, { "type": "null" }]
                          },
                          "id": {
                            "description": "The ID of the webhook.",
                            "type": "string"
                          }
                        },
                        "required": ["name", "url", "id"],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "name",
                    "builtIn",
                    "queueBehaviour",
                    "filterInQueueIds",
                    "position",
                    "possibleValues",
                    "valueRequired",
                    "freeText",
                    "webhooks"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "actions-update",
        "summary": "Update an action",
        "description": "Update an action.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "description": "The ID of the action to update.",
              "type": "string"
            },
            "required": true,
            "description": "The ID of the action to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "User defined key of the action.",
                    "anyOf": [{ "type": "string" }, { "type": "null" }]
                  },
                  "name": {
                    "description": "The name of the action.",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the action.",
                    "anyOf": [{ "type": "string" }, { "type": "null" }]
                  },
                  "type": {
                    "description": "The type of the action.",
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "AUTHOR_BLOCK",
                          "AUTHOR_BLOCK_TEMP",
                          "AUTHOR_UNBLOCK",
                          "AUTHOR_DELETE",
                          "AUTHOR_REPORT",
                          "AUTHOR_WARN",
                          "AUTHOR_CUSTOM",
                          "ITEM_CUSTOM"
                        ]
                      },
                      { "type": "null" }
                    ]
                  },
                  "builtIn": {
                    "description": "Whether the action is a built-in action or a custom one.",
                    "default": false,
                    "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                  },
                  "queueBehaviour": {
                    "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.",
                    "default": "NO_CHANGE",
                    "type": "string",
                    "enum": ["REMOVE", "ADD", "NO_CHANGE"]
                  },
                  "filterInQueueIds": {
                    "description": "The IDs of the queues the action is available in.",
                    "default": [],
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "position": {
                    "description": "Show the action in all queues, selected queues or no queues (to use via API only).",
                    "default": "ALL_QUEUES",
                    "type": "string",
                    "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"]
                  },
                  "possibleValues": {
                    "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action.",
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "description": "The value of the action.",
                          "type": "string"
                        }
                      },
                      "required": ["value"]
                    }
                  },
                  "valueRequired": {
                    "description": "Whether the action requires a value to be executed.",
                    "default": false,
                    "type": "boolean"
                  },
                  "freeText": {
                    "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values.",
                    "default": false,
                    "type": "boolean"
                  },
                  "webhooks": {
                    "description": "The action's webhooks.",
                    "default": [],
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The webhook's name, used to identify it in the dashboard",
                          "type": "string"
                        },
                        "description": {
                          "description": "The webhook's description",
                          "anyOf": [{ "type": "string" }, { "type": "null" }]
                        },
                        "url": {
                          "description": "The webhook's URL. We'll call this URL when the event occurs.",
                          "type": "string",
                          "format": "uri"
                        },
                        "id": {
                          "description": "ID of an existing webhook or undefined if this is a new webhook.",
                          "type": "string"
                        }
                      },
                      "required": ["name", "url"]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the action.",
                      "type": "string"
                    },
                    "key": {
                      "description": "User defined key of the action.",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "createdAt": {
                      "description": "The date the action was created.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the action.",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description of the action.",
                      "anyOf": [{ "type": "string" }, { "type": "null" }]
                    },
                    "type": {
                      "description": "The type of the action.",
                      "anyOf": [
                        {
                          "type": "string",
                          "enum": [
                            "AUTHOR_BLOCK",
                            "AUTHOR_BLOCK_TEMP",
                            "AUTHOR_UNBLOCK",
                            "AUTHOR_DELETE",
                            "AUTHOR_REPORT",
                            "AUTHOR_WARN",
                            "AUTHOR_CUSTOM",
                            "ITEM_CUSTOM"
                          ]
                        },
                        { "type": "null" }
                      ]
                    },
                    "builtIn": {
                      "description": "Whether the action is a built-in action or a custom one.",
                      "default": false,
                      "anyOf": [{ "type": "boolean" }, { "type": "null" }]
                    },
                    "queueBehaviour": {
                      "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.",
                      "default": "NO_CHANGE",
                      "type": "string",
                      "enum": ["REMOVE", "ADD", "NO_CHANGE"]
                    },
                    "filterInQueueIds": {
                      "description": "The IDs of the queues the action is available in.",
                      "default": [],
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "position": {
                      "description": "Show the action in all queues, selected queues or no queues (to use via API only).",
                      "default": "ALL_QUEUES",
                      "type": "string",
                      "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"]
                    },
                    "possibleValues": {
                      "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action.",
                      "default": [],
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "description": "The value of the action.",
                            "type": "string"
                          }
                        },
                        "required": ["value"],
                        "additionalProperties": false
                      }
                    },
                    "valueRequired": {
                      "description": "Whether the action requires a value to be executed.",
                      "default": false,
                      "type": "boolean"
                    },
                    "freeText": {
                      "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values.",
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "name",
                    "builtIn",
                    "queueBehaviour",
                    "filterInQueueIds",
                    "position",
                    "possibleValues",
                    "valueRequired",
                    "freeText"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "409": {
            "description": "Action with this key already exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.CONFLICT" }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "actions-delete",
        "summary": "Delete an action",
        "description": "Delete an action and all of its webhooks.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "description": "The ID of the action to delete.",
              "type": "string"
            },
            "required": true,
            "description": "The ID of the action to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Action deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "description": "Whether the action was deleted.",
                      "type": "boolean"
                    },
                    "id": {
                      "description": "The ID of the action.",
                      "type": "string"
                    }
                  },
                  "required": ["deleted", "id"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      }
    },
    "/actions/execute": {
      "post": {
        "operationId": "actions-execute",
        "summary": "Execute moderation action",
        "description": "Execute a moderation action on one or more content items.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Input parameters",
                "type": "object",
                "properties": {
                  "actionKey": {
                    "description": "ID or key of the action to execute",
                    "type": "string"
                  },
                  "contentIds": {
                    "description": "IDs of the content items to apply the action to. Provide this or authorIds.",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "authorIds": {
                    "description": "IDs of the authors to apply the action to. Provide this or contentIds.",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "value": {
                    "description": "Optional value to provide with the action",
                    "type": "string"
                  },
                  "queueId": {
                    "description": "Optional queue ID if the action is queue-specific",
                    "type": "string"
                  },
                  "duration": {
                    "description": "Optional duration in milliseconds for actions with timeouts",
                    "type": "number",
                    "minimum": 0
                  }
                },
                "required": ["actionKey"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Execution result",
                  "type": "object",
                  "properties": {
                    "success": {
                      "description": "Whether the action was executed successfully",
                      "type": "boolean"
                    }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      }
    },
    "/actions/{actionId}/execute": {
      "post": {
        "operationId": "actions-executeDeprecated",
        "summary": "Execute an action",
        "description": "Execute an action on a set of content items in a queue.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "actionId",
            "schema": {
              "description": "The ID or key of the action to execute.",
              "type": "string"
            },
            "required": true,
            "description": "The ID or key of the action to execute."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contentIds": {
                    "description": "The IDs of the content items to perform the action on.",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "authorIds": {
                    "description": "IDs of the authors to apply the action to",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "queueId": {
                    "description": "The ID of the queue the action was performed from if any.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the action. Useful to set a reason for the action etc.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "description": "Action executed successfully.",
                      "type": "boolean"
                    },
                    "actionId": {
                      "description": "The ID of the action.",
                      "type": "string"
                    },
                    "ids": {
                      "description": "The IDs of the content items.",
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  },
                  "required": ["success", "actionId", "ids"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      }
    },
    "/moderate/text": {
      "post": {
        "operationId": "moderation-text",
        "summary": "Analyze text",
        "description": "Analyze text content with your configured moderation models and filters.",
        "tags": ["Moderate"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Input parameters for text moderation",
                "type": "object",
                "properties": {
                  "contentId": {
                    "description": "The unique ID of the content in your database.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "value": {
                    "description": "The text you'd like to analyze. We recommend to submit plain text or HTML",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100000
                  },
                  "doNotStore": {
                    "description": "Do not store the content. The content won't enter the review queue",
                    "type": "boolean"
                  },
                  "authorId": {
                    "description": "The author of the content.",
                    "type": "string"
                  },
                  "contextId": {
                    "description": "For example the ID of a chat room or a post",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Any metadata you want to store with the content",
                    "type": "object",
                    "propertyNames": { "type": "string" },
                    "additionalProperties": {}
                  }
                },
                "required": ["value"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Moderation analysis results including model outputs and detected patterns",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "description": "Success if the request was successful",
                          "type": "string"
                        },
                        "error": {
                          "description": "Error message if the request failed"
                        },
                        "contentId": {
                          "description": "The ID of the content. Only returned if the content was stored.",
                          "type": "string"
                        },
                        "request": {
                          "description": "Information about the request",
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "description": "The timestamp of the request",
                              "type": "number"
                            },
                            "quota_usage": {
                              "description": "The quota usage of the request",
                              "type": "number"
                            }
                          },
                          "required": ["timestamp", "quota_usage"],
                          "additionalProperties": false
                        },
                        "flagged": {
                          "description": "Whether the content was flagged by any models",
                          "type": "boolean"
                        },
                        "author": {
                          "description": "The author of the content if your account has authors enabled. Requires you to send authorId when submitting content.",
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Author ID in Moderation API",
                                  "type": "string"
                                },
                                "external_id": {
                                  "description": "The author's ID from your system",
                                  "anyOf": [
                                    { "type": "string" },
                                    { "type": "null" }
                                  ]
                                },
                                "block": {
                                  "description": "Block or suspension details, if applicable. Null if the author is enabled.",
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "until": {
                                          "description": "The timestamp until which they are blocked if the author is suspended.",
                                          "anyOf": [
                                            { "type": "number" },
                                            { "type": "null" }
                                          ]
                                        },
                                        "reason": {
                                          "description": "The moderators reason why the author was blocked or suspended.",
                                          "anyOf": [
                                            { "type": "string" },
                                            { "type": "null" }
                                          ]
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    { "type": "null" }
                                  ]
                                },
                                "status": {
                                  "description": "Current author status",
                                  "type": "string",
                                  "enum": ["enabled", "suspended", "blocked"]
                                },
                                "trust_level": {
                                  "type": "object",
                                  "properties": {
                                    "level": {
                                      "description": "Author trust level (-1, 0, 1, 2, 3, or 4)",
                                      "type": "number"
                                    },
                                    "manual": {
                                      "description": "True if the trust level was set manually by a moderator",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": ["level", "manual"],
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "id",
                                "block",
                                "status",
                                "trust_level"
                              ],
                              "additionalProperties": false
                            },
                            { "type": "null" }
                          ]
                        },
                        "content_moderated": {
                          "description": "Whether the content was moderated or not. Same as `content` !== `original`",
                          "type": "boolean"
                        },
                        "unicode_spoofing": {
                          "description": "Whether the content is using look-alike characters. Often used by spammers.",
                          "type": "boolean"
                        },
                        "data_found": {
                          "description": "Whether any entity matchers found data for the content",
                          "type": "boolean"
                        },
                        "original": {
                          "description": "The original content",
                          "type": "string"
                        },
                        "content": {
                          "description": "The content after moderation. With all mask replacements applied and look-alike characters replaced with the original characters.",
                          "type": "string"
                        },
                        "nsfw": {
                          "description": "The NSFW model output if enabled in your project. Read more at https://docs.moderationapi.com/models/nsfw",
                          "type": "object",
                          "properties": {
                            "label": {
                              "description": "The label of the model",
                              "type": "string"
                            },
                            "score": {
                              "description": "The confidence of the model",
                              "type": "number"
                            },
                            "error": {
                              "description": "Indicates an error with the model",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate",
                              "type": "string"
                            },
                            "label_scores": {
                              "description": "The confidence of all labels",
                              "type": "object",
                              "properties": {
                                "SENSITIVE": {
                                  "description": "Mentions religion, politics, race, etc., but is neutral or positive.",
                                  "type": "number"
                                },
                                "UNSAFE": {
                                  "description": "Sexual, hateful, profane, and inappropriate content.",
                                  "type": "number"
                                },
                                "NEUTRAL": {
                                  "description": "",
                                  "type": "number"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "toxicity": {
                          "description": "The toxicity model output if enabled in your project. Read more at https://docs.moderationapi.com/models/toxicity",
                          "type": "object",
                          "properties": {
                            "label": {
                              "description": "The label of the model",
                              "type": "string"
                            },
                            "score": {
                              "description": "The confidence of the model",
                              "type": "number"
                            },
                            "error": {
                              "description": "Indicates an error with the model",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate",
                              "type": "string"
                            },
                            "label_scores": {
                              "description": "The confidence of all labels",
                              "type": "object",
                              "properties": {
                                "TOXICITY": {
                                  "description": "Rude or disrespectful content.",
                                  "type": "number"
                                },
                                "PROFANITY": {
                                  "description": "Swearing, curse words, and other obscene language.",
                                  "type": "number"
                                },
                                "DISCRIMINATION": {
                                  "description": "Discrimination of race, religion, gender, etc.",
                                  "type": "number"
                                },
                                "SEVERE_TOXICITY": {
                                  "description": "Very hateful and aggressive content.",
                                  "type": "number"
                                },
                                "INSULT": {
                                  "description": "Negative comments about looks or personality etc.",
                                  "type": "number"
                                },
                                "THREAT": {
                                  "description": "Content containing intention to harm or violence.",
                                  "type": "number"
                                },
                                "NEUTRAL": {
                                  "description": "",
                                  "type": "number"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "quality": {
                          "description": "The spam model output if enabled in your project. Read more at https://docs.moderationapi.com/models/spam",
                          "type": "object",
                          "properties": {
                            "label": {
                              "description": "The label of the model",
                              "type": "string"
                            },
                            "score": {
                              "description": "The confidence of the model",
                              "type": "number"
                            },
                            "error": {
                              "description": "Indicates an error with the model",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate",
                              "type": "string"
                            },
                            "label_scores": {
                              "description": "The confidence of all labels",
                              "type": "object",
                              "properties": {
                                "UNSUBSTANTIAL": {
                                  "description": "Trivial or short content.",
                                  "type": "number"
                                },
                                "INCOHERENT": {
                                  "description": "Difficult to understand, nonsensical.",
                                  "type": "number"
                                },
                                "SPAM": {
                                  "description": "Irrelevant and unsolicited commercial content.",
                                  "type": "number"
                                },
                                "NEUTRAL": {
                                  "description": "",
                                  "type": "number"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "sentiment": {
                          "description": "The sentiment model output if enabled in your project. Read more at https://docs.moderationapi.com/models/sentiment",
                          "type": "object",
                          "properties": {
                            "label": {
                              "description": "The label of the model",
                              "type": "string"
                            },
                            "score": {
                              "description": "The confidence of the model",
                              "type": "number"
                            },
                            "error": {
                              "description": "Indicates an error with the model",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate",
                              "type": "string"
                            },
                            "label_scores": {
                              "description": "The confidence of all labels",
                              "type": "object",
                              "properties": {
                                "POSITIVE": {
                                  "description": "Positive sentiment.",
                                  "type": "number"
                                },
                                "NEGATIVE": {
                                  "description": "Negative sentiment.",
                                  "type": "number"
                                },
                                "NEUTRAL": {
                                  "description": "",
                                  "type": "number"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "propriety": {
                          "description": "The propriety model output if enabled in your project. Read more at https://docs.moderationapi.com/models/propriety",
                          "type": "object",
                          "properties": {
                            "label": {
                              "description": "The label of the model",
                              "type": "string"
                            },
                            "score": {
                              "description": "The confidence of the model",
                              "type": "number"
                            },
                            "error": {
                              "description": "Indicates an error with the model",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate",
                              "type": "string"
                            },
                            "label_scores": {
                              "description": "The confidence of all labels",
                              "type": "object",
                              "properties": {
                                "FLIRTATION": {
                                  "description": "Pickup lines, compliments on appearance, etc.",
                                  "type": "number"
                                },
                                "SEXUALLY_EXPLICIT": {
                                  "description": "References to sexual acts, body parts, etc.",
                                  "type": "number"
                                },
                                "NEUTRAL": {
                                  "description": "",
                                  "type": "number"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "email": {
                          "description": "The email entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/email",
                          "type": "object",
                          "properties": {
                            "mode": {
                              "description": "The detection mode.",
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"]
                            },
                            "found": {
                              "description": "Whether a match was found or not.",
                              "type": "boolean"
                            },
                            "matches": {
                              "description": "The matches of the entity matcher.",
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "description": "Indicates an error with the matcher.",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "phone": {
                          "description": "The phone entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/phone",
                          "type": "object",
                          "properties": {
                            "mode": {
                              "description": "The detection mode.",
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"]
                            },
                            "found": {
                              "description": "Whether a match was found or not.",
                              "type": "boolean"
                            },
                            "matches": {
                              "description": "The matches of the entity matcher.",
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "description": "Indicates an error with the matcher.",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "url": {
                          "description": "The url entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/url",
                          "type": "object",
                          "properties": {
                            "mode": {
                              "description": "The detection mode.",
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"]
                            },
                            "found": {
                              "description": "Whether a match was found or not.",
                              "type": "boolean"
                            },
                            "matches": {
                              "description": "The matches of the entity matcher.",
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "description": "Indicates an error with the matcher.",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "address": {
                          "description": "The address entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/address",
                          "type": "object",
                          "properties": {
                            "mode": {
                              "description": "The detection mode.",
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"]
                            },
                            "found": {
                              "description": "Whether a match was found or not.",
                              "type": "boolean"
                            },
                            "matches": {
                              "description": "The matches of the entity matcher.",
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "description": "Indicates an error with the matcher.",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "name": {
                          "description": "The name entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/name",
                          "type": "object",
                          "properties": {
                            "mode": {
                              "description": "The detection mode.",
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"]
                            },
                            "found": {
                              "description": "Whether a match was found or not.",
                              "type": "boolean"
                            },
                            "matches": {
                              "description": "The matches of the entity matcher.",
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "description": "Indicates an error with the matcher.",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "username": {
                          "description": "The username entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/username",
                          "type": "object",
                          "properties": {
                            "mode": {
                              "description": "The detection mode.",
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"]
                            },
                            "found": {
                              "description": "Whether a match was found or not.",
                              "type": "boolean"
                            },
                            "matches": {
                              "description": "The matches of the entity matcher.",
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "description": "Indicates an error with the matcher.",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "profanity": {
                          "description": "The profanity entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/profanity",
                          "type": "object",
                          "properties": {
                            "mode": {
                              "description": "The detection mode.",
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"]
                            },
                            "found": {
                              "description": "Whether a match was found or not.",
                              "type": "boolean"
                            },
                            "matches": {
                              "description": "The matches of the entity matcher.",
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "description": "Indicates an error with the matcher.",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "sensitive": {
                          "description": "The sensitive numbers entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/sensitive",
                          "type": "object",
                          "properties": {
                            "mode": {
                              "description": "The detection mode.",
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"]
                            },
                            "found": {
                              "description": "Whether a match was found or not.",
                              "type": "boolean"
                            },
                            "matches": {
                              "description": "The matches of the entity matcher.",
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "description": "Indicates an error with the matcher.",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "wordlist": {
                          "description": "The wordlist entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/word",
                          "type": "object",
                          "properties": {
                            "mode": {
                              "description": "The detection mode.",
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"]
                            },
                            "found": {
                              "description": "Whether a match was found or not.",
                              "type": "boolean"
                            },
                            "matches": {
                              "description": "The matches of the entity matcher.",
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "description": "Indicates an error with the matcher.",
                              "type": "string"
                            },
                            "warning": {
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "wordlists": {
                          "description": "The wordlist entity matcher outputs if enabled in your project. Read more at https://docs.moderationapi.com/models/word",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "description": "The flagging mode.",
                                "type": "string",
                                "enum": ["BLOCKLIST", "ALLOWLIST", "PASS"]
                              },
                              "found": {
                                "description": "Whether a match was found or not.",
                                "type": "boolean"
                              },
                              "matches": {
                                "description": "The matches of the entity matcher.",
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "components": {
                                "description": "The components of the matcher."
                              },
                              "error": {
                                "description": "Indicates an error with the matcher.",
                                "type": "string"
                              },
                              "warning": {
                                "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                                "type": "string"
                              },
                              "flagged": {
                                "description": "Whether the wordlists flagged the content.",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "The name of the wordlist",
                                "type": "string"
                              },
                              "id": {
                                "description": "The ID of the wordlist",
                                "type": "string"
                              },
                              "score": {
                                "description": "The score of the wordlist",
                                "type": "number"
                              }
                            },
                            "required": [
                              "mode",
                              "flagged",
                              "name",
                              "id",
                              "score"
                            ],
                            "additionalProperties": false
                          }
                        }
                      },
                      "required": [
                        "status",
                        "request",
                        "flagged",
                        "author",
                        "content_moderated",
                        "unicode_spoofing",
                        "data_found",
                        "original",
                        "content"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "propertyNames": { "type": "string" },
                      "additionalProperties": {}
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/moderate/object": {
      "post": {
        "operationId": "moderation-object",
        "summary": "Analyze object.",
        "description": "Analyze an object with multiple fields including text, images, video, audio. Use to moderate a post, a profile, a form submission or anything that have multiple fields.",
        "tags": ["Moderate"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contentId": {
                    "description": "The unique ID of the content in your database.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "doNotStore": {
                    "description": "Do not store the content. The content won't enter the review queue",
                    "type": "boolean"
                  },
                  "authorId": {
                    "description": "The author of the content.",
                    "type": "string"
                  },
                  "contextId": {
                    "description": "For example the ID of a chat room or a post",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Any metadata you want to store with the content",
                    "type": "object",
                    "propertyNames": { "type": "string" },
                    "additionalProperties": {}
                  },
                  "value": {
                    "description": "The object you want to analyze.",
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "The type of the object you want to analyze.",
                        "type": "string",
                        "enum": ["profile", "event", "product", "object"]
                      },
                      "data": {
                        "type": "object",
                        "propertyNames": { "type": "string" },
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "description": "The type of content (e.g., \"text\", \"image\", \"video\")",
                              "type": "string",
                              "enum": ["text", "image", "video", "audio"]
                            },
                            "modelIds": {
                              "description": "Optional array of specific model IDs to use",
                              "type": "array",
                              "items": { "type": "string" }
                            },
                            "value": {
                              "description": "The content to analyze",
                              "type": "string"
                            }
                          },
                          "required": ["type", "value"]
                        }
                      }
                    },
                    "required": ["type", "data"]
                  }
                },
                "required": ["value"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "description": "Success if the request was successful",
                          "type": "string"
                        },
                        "error": {
                          "description": "Error message if the request failed"
                        },
                        "contentId": {
                          "description": "The ID of the content. Only returned if the content was stored.",
                          "type": "string"
                        },
                        "request": {
                          "description": "Information about the request",
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "description": "The timestamp of the request",
                              "type": "number"
                            },
                            "quota_usage": {
                              "description": "The quota usage of the request",
                              "type": "number"
                            }
                          },
                          "required": ["timestamp", "quota_usage"],
                          "additionalProperties": false
                        },
                        "flagged": {
                          "description": "Whether the content was flagged by any models",
                          "type": "boolean"
                        },
                        "author": {
                          "description": "The author of the content if your account has authors enabled. Requires you to send authorId when submitting content.",
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Author ID in Moderation API",
                                  "type": "string"
                                },
                                "external_id": {
                                  "description": "The author's ID from your system",
                                  "anyOf": [
                                    { "type": "string" },
                                    { "type": "null" }
                                  ]
                                },
                                "block": {
                                  "description": "Block or suspension details, if applicable. Null if the author is enabled.",
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "until": {
                                          "description": "The timestamp until which they are blocked if the author is suspended.",
                                          "anyOf": [
                                            { "type": "number" },
                                            { "type": "null" }
                                          ]
                                        },
                                        "reason": {
                                          "description": "The moderators reason why the author was blocked or suspended.",
                                          "anyOf": [
                                            { "type": "string" },
                                            { "type": "null" }
                                          ]
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    { "type": "null" }
                                  ]
                                },
                                "status": {
                                  "description": "Current author status",
                                  "type": "string",
                                  "enum": ["enabled", "suspended", "blocked"]
                                },
                                "trust_level": {
                                  "type": "object",
                                  "properties": {
                                    "level": {
                                      "description": "Author trust level (-1, 0, 1, 2, 3, or 4)",
                                      "type": "number"
                                    },
                                    "manual": {
                                      "description": "True if the trust level was set manually by a moderator",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": ["level", "manual"],
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "id",
                                "block",
                                "status",
                                "trust_level"
                              ],
                              "additionalProperties": false
                            },
                            { "type": "null" }
                          ]
                        },
                        "unicode_spoofing": {
                          "description": "Whether the content is using look-alike characters. Often used by spammers.",
                          "type": "boolean"
                        },
                        "data_found": {
                          "description": "Whether any entity matchers found data for the content",
                          "type": "boolean"
                        },
                        "labels": {
                          "description": "The scores of each label",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "description": "The label of the model",
                                "type": "string"
                              },
                              "model": {
                                "description": "The model that found the label",
                                "type": "string"
                              },
                              "score": {
                                "description": "The confidence of the model",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1
                              }
                            },
                            "required": ["label", "model", "score"],
                            "additionalProperties": false
                          }
                        },
                        "entities": {
                          "description": "The entities found in the content",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "model": {
                                "description": "The model that found the entity",
                                "type": "string"
                              },
                              "matches": {
                                "description": "The matches of the entity",
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "score": {
                                "description": "The similarity score of the matches",
                                "type": "number"
                              }
                            },
                            "required": ["model", "matches"],
                            "additionalProperties": false
                          }
                        },
                        "wordlists": {
                          "description": "The wordlist entity matcher outputs if enabled in your project. Read more at https://docs.moderationapi.com/models/word",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "description": "The flagging mode.",
                                "type": "string",
                                "enum": ["BLOCKLIST", "ALLOWLIST", "PASS"]
                              },
                              "found": {
                                "description": "Whether a match was found or not.",
                                "type": "boolean"
                              },
                              "matches": {
                                "description": "The matches of the entity matcher.",
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "components": {
                                "description": "The components of the matcher."
                              },
                              "error": {
                                "description": "Indicates an error with the matcher.",
                                "type": "string"
                              },
                              "warning": {
                                "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.",
                                "type": "string"
                              },
                              "flagged": {
                                "description": "Whether the wordlists flagged the content.",
                                "type": "boolean"
                              },
                              "name": {
                                "description": "The name of the wordlist",
                                "type": "string"
                              },
                              "id": {
                                "description": "The ID of the wordlist",
                                "type": "string"
                              },
                              "score": {
                                "description": "The score of the wordlist",
                                "type": "number"
                              }
                            },
                            "required": [
                              "mode",
                              "flagged",
                              "name",
                              "id",
                              "score"
                            ],
                            "additionalProperties": false
                          }
                        },
                        "fields": {
                          "description": "The fields in the object and their flags",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "description": "The key of the field",
                                "type": "string"
                              },
                              "flagged": {
                                "description": "Whether the field was flagged",
                                "type": "boolean"
                              },
                              "flagged_by": {
                                "description": "The models that flagged the field",
                                "type": "array",
                                "items": { "type": "string" }
                              }
                            },
                            "required": ["key", "flagged", "flagged_by"],
                            "additionalProperties": false
                          }
                        }
                      },
                      "required": [
                        "status",
                        "request",
                        "flagged",
                        "author",
                        "unicode_spoofing",
                        "data_found",
                        "labels",
                        "entities",
                        "fields"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "propertyNames": { "type": "string" },
                      "additionalProperties": {}
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/moderate/image": {
      "post": {
        "operationId": "moderation-image",
        "summary": "Analyze image",
        "description": "Analyze image with your Moderation API project",
        "tags": ["Moderate"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contentId": {
                    "description": "The unique ID of the content in your database.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "doNotStore": {
                    "description": "Do not store the content. The content won't enter the review queue",
                    "type": "boolean"
                  },
                  "authorId": {
                    "description": "The author of the content.",
                    "type": "string"
                  },
                  "contextId": {
                    "description": "For example the ID of a chat room or a post",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Any metadata you want to store with the content",
                    "type": "object",
                    "propertyNames": { "type": "string" },
                    "additionalProperties": {}
                  },
                  "url": {
                    "description": "The URL of the image you want to analyze.",
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": ["url"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Success if the request was successful",
                      "type": "string"
                    },
                    "error": {
                      "description": "Error message if the request failed"
                    },
                    "contentId": {
                      "description": "The ID of the content. Only returned if the content was stored.",
                      "type": "string"
                    },
                    "request": {
                      "description": "Information about the request",
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "description": "The timestamp of the request",
                          "type": "number"
                        },
                        "quota_usage": {
                          "description": "The quota usage of the request",
                          "type": "number"
                        }
                      },
                      "required": ["timestamp", "quota_usage"],
                      "additionalProperties": false
                    },
                    "flagged": {
                      "description": "Whether the content was flagged by any models",
                      "type": "boolean"
                    },
                    "author": {
                      "description": "The author of the content if your account has authors enabled. Requires you to send authorId when submitting content.",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Author ID in Moderation API",
                              "type": "string"
                            },
                            "external_id": {
                              "description": "The author's ID from your system",
                              "anyOf": [
                                { "type": "string" },
                                { "type": "null" }
                              ]
                            },
                            "block": {
                              "description": "Block or suspension details, if applicable. Null if the author is enabled.",
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "until": {
                                      "description": "The timestamp until which they are blocked if the author is suspended.",
                                      "anyOf": [
                                        { "type": "number" },
                                        { "type": "null" }
                                      ]
                                    },
                                    "reason": {
                                      "description": "The moderators reason why the author was blocked or suspended.",
                                      "anyOf": [
                                        { "type": "string" },
                                        { "type": "null" }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                { "type": "null" }
                              ]
                            },
                            "status": {
                              "description": "Current author status",
                              "type": "string",
                              "enum": ["enabled", "suspended", "blocked"]
                            },
                            "trust_level": {
                              "type": "object",
                              "properties": {
                                "level": {
                                  "description": "Author trust level (-1, 0, 1, 2, 3, or 4)",
                                  "type": "number"
                                },
                                "manual": {
                                  "description": "True if the trust level was set manually by a moderator",
                                  "type": "boolean"
                                }
                              },
                              "required": ["level", "manual"],
                              "additionalProperties": false
                            }
                          },
                          "required": ["id", "block", "status", "trust_level"],
                          "additionalProperties": false
                        },
                        { "type": "null" }
                      ]
                    },
                    "labels": {
                      "description": "The scores of each label",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "description": "The label of the model",
                            "type": "string",
                            "enum": [
                              "nudity",
                              "suggestive",
                              "gore",
                              "hate",
                              "violence",
                              "weapon",
                              "smoking",
                              "drugs",
                              "alcohol",
                              "text",
                              "toxic"
                            ]
                          },
                          "score": {
                            "description": "The confidence of the model",
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                          }
                        },
                        "required": ["label", "score"],
                        "additionalProperties": false
                      }
                    },
                    "texts": {
                      "description": "The texts found in the image, if the image text model is enabled",
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  },
                  "required": [
                    "status",
                    "request",
                    "flagged",
                    "author",
                    "labels"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/moderate/video": {
      "post": {
        "operationId": "moderation-video",
        "summary": "Analyze video",
        "description": "Analyze video content with your configured moderation models and filters.",
        "tags": ["Moderate"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Input parameters for video moderation",
                "type": "object",
                "properties": {
                  "contentId": {
                    "description": "The unique ID of the content in your database.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "doNotStore": {
                    "description": "Do not store the content. The content won't enter the review queue",
                    "type": "boolean"
                  },
                  "authorId": {
                    "description": "The author of the content.",
                    "type": "string"
                  },
                  "contextId": {
                    "description": "For example the ID of a chat room or a post",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Any metadata you want to store with the content",
                    "type": "object",
                    "propertyNames": { "type": "string" },
                    "additionalProperties": {}
                  },
                  "url": {
                    "description": "The URL of the video you want to analyze.",
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": ["url"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "description": "Success if the request was successful",
                          "type": "string"
                        },
                        "error": {
                          "description": "Error message if the request failed"
                        },
                        "contentId": {
                          "description": "The ID of the content. Only returned if the content was stored.",
                          "type": "string"
                        },
                        "request": {
                          "description": "Information about the request",
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "description": "The timestamp of the request",
                              "type": "number"
                            },
                            "quota_usage": {
                              "description": "The quota usage of the request",
                              "type": "number"
                            }
                          },
                          "required": ["timestamp", "quota_usage"],
                          "additionalProperties": false
                        },
                        "flagged": {
                          "description": "Whether the content was flagged by any models",
                          "type": "boolean"
                        },
                        "author": {
                          "description": "The author of the content if your account has authors enabled. Requires you to send authorId when submitting content.",
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Author ID in Moderation API",
                                  "type": "string"
                                },
                                "external_id": {
                                  "description": "The author's ID from your system",
                                  "anyOf": [
                                    { "type": "string" },
                                    { "type": "null" }
                                  ]
                                },
                                "block": {
                                  "description": "Block or suspension details, if applicable. Null if the author is enabled.",
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "until": {
                                          "description": "The timestamp until which they are blocked if the author is suspended.",
                                          "anyOf": [
                                            { "type": "number" },
                                            { "type": "null" }
                                          ]
                                        },
                                        "reason": {
                                          "description": "The moderators reason why the author was blocked or suspended.",
                                          "anyOf": [
                                            { "type": "string" },
                                            { "type": "null" }
                                          ]
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    { "type": "null" }
                                  ]
                                },
                                "status": {
                                  "description": "Current author status",
                                  "type": "string",
                                  "enum": ["enabled", "suspended", "blocked"]
                                },
                                "trust_level": {
                                  "type": "object",
                                  "properties": {
                                    "level": {
                                      "description": "Author trust level (-1, 0, 1, 2, 3, or 4)",
                                      "type": "number"
                                    },
                                    "manual": {
                                      "description": "True if the trust level was set manually by a moderator",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": ["level", "manual"],
                                  "additionalProperties": false
                                }
                              },
                              "required": [
                                "id",
                                "block",
                                "status",
                                "trust_level"
                              ],
                              "additionalProperties": false
                            },
                            { "type": "null" }
                          ]
                        }
                      },
                      "required": ["status", "request", "flagged", "author"],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "propertyNames": { "type": "string" },
                      "additionalProperties": {}
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/moderate/audio": {
      "post": {
        "operationId": "moderation-audio",
        "summary": "Analyze audio",
        "description": "Analyze audio content with your configured moderation models and filters.",
        "tags": ["Moderate"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Input parameters for audio moderation",
                "type": "object",
                "properties": {
                  "contentId": {
                    "description": "The unique ID of the content in your database.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "doNotStore": {
                    "description": "Do not store the content. The content won't enter the review queue",
                    "type": "boolean"
                  },
                  "authorId": {
                    "description": "The author of the content.",
                    "type": "string"
                  },
                  "contextId": {
                    "description": "For example the ID of a chat room or a post",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Any metadata you want to store with the content",
                    "type": "object",
                    "propertyNames": { "type": "string" },
                    "additionalProperties": {}
                  },
                  "url": {
                    "description": "The URL of the audio you want to analyze.",
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": ["url"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Audio moderation analysis results",
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Success if the request was successful",
                      "type": "string"
                    },
                    "error": {
                      "description": "Error message if the request failed"
                    },
                    "contentId": {
                      "description": "The ID of the content. Only returned if the content was stored.",
                      "type": "string"
                    },
                    "request": {
                      "description": "Information about the request",
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "description": "The timestamp of the request",
                          "type": "number"
                        },
                        "quota_usage": {
                          "description": "The quota usage of the request",
                          "type": "number"
                        }
                      },
                      "required": ["timestamp", "quota_usage"],
                      "additionalProperties": false
                    },
                    "flagged": {
                      "description": "Whether the content was flagged by any models",
                      "type": "boolean"
                    },
                    "author": {
                      "description": "The author of the content if your account has authors enabled. Requires you to send authorId when submitting content.",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Author ID in Moderation API",
                              "type": "string"
                            },
                            "external_id": {
                              "description": "The author's ID from your system",
                              "anyOf": [
                                { "type": "string" },
                                { "type": "null" }
                              ]
                            },
                            "block": {
                              "description": "Block or suspension details, if applicable. Null if the author is enabled.",
                              "anyOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "until": {
                                      "description": "The timestamp until which they are blocked if the author is suspended.",
                                      "anyOf": [
                                        { "type": "number" },
                                        { "type": "null" }
                                      ]
                                    },
                                    "reason": {
                                      "description": "The moderators reason why the author was blocked or suspended.",
                                      "anyOf": [
                                        { "type": "string" },
                                        { "type": "null" }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                { "type": "null" }
                              ]
                            },
                            "status": {
                              "description": "Current author status",
                              "type": "string",
                              "enum": ["enabled", "suspended", "blocked"]
                            },
                            "trust_level": {
                              "type": "object",
                              "properties": {
                                "level": {
                                  "description": "Author trust level (-1, 0, 1, 2, 3, or 4)",
                                  "type": "number"
                                },
                                "manual": {
                                  "description": "True if the trust level was set manually by a moderator",
                                  "type": "boolean"
                                }
                              },
                              "required": ["level", "manual"],
                              "additionalProperties": false
                            }
                          },
                          "required": ["id", "block", "status", "trust_level"],
                          "additionalProperties": false
                        },
                        { "type": "null" }
                      ]
                    }
                  },
                  "required": ["status", "request", "flagged", "author"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/account": {
      "get": {
        "operationId": "account-get",
        "summary": "Get account details",
        "description": "Get account details",
        "tags": ["Account"],
        "security": [{ "Authorization": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Account details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID of the account",
                      "type": "string"
                    },
                    "paid_plan_name": {
                      "description": "Name of the paid plan",
                      "type": "string"
                    },
                    "text_api_quota": {
                      "description": "Text API quota",
                      "type": "number"
                    },
                    "remaining_quota": {
                      "description": "Remaining quota",
                      "type": "number"
                    },
                    "current_project": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "ID of the current project",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the current project",
                          "type": "string"
                        }
                      },
                      "required": ["id", "name"],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "id",
                    "paid_plan_name",
                    "text_api_quota",
                    "remaining_quota"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          }
        }
      }
    },
    "/wordlist": {
      "get": {
        "operationId": "wordlist-list",
        "summary": "List wordlists",
        "description": "List all wordlists for the authenticated organization",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Array of wordlists",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Unique identifier of the wordlist",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the wordlist",
                        "anyOf": [{ "type": "string" }, { "type": "null" }]
                      },
                      "createdAt": {
                        "description": "When the wordlist was created",
                        "anyOf": [{ "type": "string" }, { "type": "null" }]
                      },
                      "userId": {
                        "description": "User who created the wordlist",
                        "anyOf": [{ "type": "string" }, { "type": "null" }]
                      }
                    },
                    "required": ["id", "name", "createdAt", "userId"],
                    "additionalProperties": false
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/wordlist/{id}": {
      "get": {
        "operationId": "wordlist-getWordlistPublic",
        "summary": "Get wordlist",
        "description": "Get a specific wordlist by ID",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "description": "ID of the wordlist to get",
              "type": "string"
            },
            "required": true,
            "description": "ID of the wordlist to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID of the wordlist",
                      "type": "string"
                    },
                    "name": {
                      "anyOf": [
                        {
                          "description": "Name of the wordlist",
                          "type": "string"
                        },
                        { "type": "null" }
                      ]
                    },
                    "words": {
                      "description": "Words in the wordlist",
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "createdAt": {
                      "description": "Creation date of the wordlist",
                      "type": "string"
                    },
                    "organizationId": {
                      "description": "ID of the organization",
                      "type": "string"
                    },
                    "userId": {
                      "anyOf": [
                        { "description": "ID of the user", "type": "string" },
                        { "type": "null" }
                      ]
                    },
                    "strict": {
                      "description": "Strict mode",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "words",
                    "createdAt",
                    "organizationId",
                    "userId",
                    "strict"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "wordlist-update",
        "summary": "Update wordlist",
        "description": "Update a wordlist",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "description": "ID of the wordlist to update",
              "type": "string"
            },
            "required": true,
            "description": "ID of the wordlist to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "New name for the wordlist",
                    "type": "string"
                  },
                  "words": {
                    "description": "New words for the wordlist. Replace the existing words with these new ones. Duplicate words will be ignored.",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "strict": {
                    "description": "Deprecated. Now using threshold in project settings.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wordlist updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID of the wordlist",
                      "type": "string"
                    },
                    "name": {
                      "anyOf": [
                        {
                          "description": "Name of the wordlist",
                          "type": "string"
                        },
                        { "type": "null" }
                      ]
                    },
                    "words": {
                      "description": "Words in the wordlist",
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "createdAt": {
                      "description": "Creation date of the wordlist",
                      "type": "string"
                    },
                    "organizationId": {
                      "description": "ID of the organization",
                      "type": "string"
                    },
                    "userId": {
                      "anyOf": [
                        { "description": "ID of the user", "type": "string" },
                        { "type": "null" }
                      ]
                    },
                    "strict": {
                      "description": "Strict mode",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "words",
                    "createdAt",
                    "organizationId",
                    "userId",
                    "strict"
                  ],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      }
    },
    "/wordlist/{id}/embedding-status": {
      "get": {
        "operationId": "wordlist-wordlistEmbeddingStatus",
        "summary": "Get embedding status",
        "description": "Get the current embedding progress status for a wordlist",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "description": "ID of the wordlist to check embedding status for",
              "type": "string"
            },
            "required": true,
            "description": "ID of the wordlist to check embedding status for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Embedding status details",
                  "type": "object",
                  "properties": {
                    "progress": {
                      "description": "Percentage of words that have been embedded (0-100)",
                      "type": "number"
                    },
                    "totalWords": {
                      "description": "Total number of words in the wordlist",
                      "type": "number"
                    },
                    "remainingWords": {
                      "description": "Number of words still waiting to be embedded",
                      "type": "number"
                    }
                  },
                  "required": ["progress", "totalWords", "remainingWords"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/wordlist/{id}/words": {
      "post": {
        "operationId": "wordlist-addWords",
        "summary": "Add words to wordlist",
        "description": "Add words to an existing wordlist",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "description": "ID of the wordlist to add words to",
              "type": "string"
            },
            "required": true,
            "description": "ID of the wordlist to add words to"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "words": {
                    "description": "Array of words to add to the wordlist. Duplicate words will be ignored.",
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "required": ["words"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Words successfully added to wordlist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "addedCount": {
                      "description": "Number of words added",
                      "type": "number"
                    },
                    "totalCount": {
                      "description": "Total number of words in wordlist",
                      "type": "number"
                    },
                    "addedWords": {
                      "description": "List of words that were added",
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  },
                  "required": ["addedCount", "totalCount", "addedWords"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "wordlist-removeWords",
        "summary": "Remove words from wordlist",
        "description": "Remove words from an existing wordlist",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "description": "ID of the wordlist to remove words from",
              "type": "string"
            },
            "required": true,
            "description": "ID of the wordlist to remove words from"
          },
          {
            "in": "query",
            "name": "words",
            "schema": {
              "description": "Array of words to remove from the wordlist",
              "type": "array",
              "items": { "type": "string" }
            },
            "required": true,
            "description": "Array of words to remove from the wordlist"
          }
        ],
        "responses": {
          "200": {
            "description": "Words successfully removed from wordlist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "removedCount": {
                      "description": "Number of words removed",
                      "type": "number"
                    },
                    "totalCount": {
                      "description": "Total number of words in wordlist",
                      "type": "number"
                    },
                    "removedWords": {
                      "description": "List of words removed",
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  },
                  "required": ["removedCount", "totalCount", "removedWords"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "error.BAD_REQUEST": {
        "title": "Invalid input data error (400)",
        "description": "The error information",
        "example": {
          "code": "BAD_REQUEST",
          "message": "Invalid input data",
          "issues": []
        },
        "type": "object",
        "properties": {
          "message": {
            "description": "The error message",
            "example": "Invalid input data",
            "type": "string"
          },
          "code": {
            "description": "The error code",
            "example": "BAD_REQUEST",
            "type": "string"
          },
          "issues": {
            "description": "An array of issues that were responsible for the error",
            "example": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"],
              "additionalProperties": false
            }
          }
        },
        "required": ["message", "code"],
        "additionalProperties": false
      },
      "error.UNAUTHORIZED": {
        "title": "Authorization not provided error (401)",
        "description": "The error information",
        "example": {
          "code": "UNAUTHORIZED",
          "message": "Authorization not provided",
          "issues": []
        },
        "type": "object",
        "properties": {
          "message": {
            "description": "The error message",
            "example": "Authorization not provided",
            "type": "string"
          },
          "code": {
            "description": "The error code",
            "example": "UNAUTHORIZED",
            "type": "string"
          },
          "issues": {
            "description": "An array of issues that were responsible for the error",
            "example": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"],
              "additionalProperties": false
            }
          }
        },
        "required": ["message", "code"],
        "additionalProperties": false
      },
      "error.FORBIDDEN": {
        "title": "Insufficient access error (403)",
        "description": "The error information",
        "example": {
          "code": "FORBIDDEN",
          "message": "Insufficient access",
          "issues": []
        },
        "type": "object",
        "properties": {
          "message": {
            "description": "The error message",
            "example": "Insufficient access",
            "type": "string"
          },
          "code": {
            "description": "The error code",
            "example": "FORBIDDEN",
            "type": "string"
          },
          "issues": {
            "description": "An array of issues that were responsible for the error",
            "example": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"],
              "additionalProperties": false
            }
          }
        },
        "required": ["message", "code"],
        "additionalProperties": false
      },
      "error.NOT_FOUND": {
        "title": "Not found error (404)",
        "description": "The error information",
        "example": {
          "code": "NOT_FOUND",
          "message": "Not found",
          "issues": []
        },
        "type": "object",
        "properties": {
          "message": {
            "description": "The error message",
            "example": "Not found",
            "type": "string"
          },
          "code": {
            "description": "The error code",
            "example": "NOT_FOUND",
            "type": "string"
          },
          "issues": {
            "description": "An array of issues that were responsible for the error",
            "example": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"],
              "additionalProperties": false
            }
          }
        },
        "required": ["message", "code"],
        "additionalProperties": false
      },
      "error.INTERNAL_SERVER_ERROR": {
        "title": "Internal server error error (500)",
        "description": "The error information",
        "example": {
          "code": "INTERNAL_SERVER_ERROR",
          "message": "Internal server error",
          "issues": []
        },
        "type": "object",
        "properties": {
          "message": {
            "description": "The error message",
            "example": "Internal server error",
            "type": "string"
          },
          "code": {
            "description": "The error code",
            "example": "INTERNAL_SERVER_ERROR",
            "type": "string"
          },
          "issues": {
            "description": "An array of issues that were responsible for the error",
            "example": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"],
              "additionalProperties": false
            }
          }
        },
        "required": ["message", "code"],
        "additionalProperties": false
      },
      "error.CONFLICT": {
        "title": "Action with this key already exists error (409)",
        "description": "The error information",
        "example": {
          "code": "CONFLICT",
          "message": "Action with this key already exists",
          "issues": []
        },
        "type": "object",
        "properties": {
          "message": {
            "description": "The error message",
            "example": "Action with this key already exists",
            "type": "string"
          },
          "code": {
            "description": "The error code",
            "example": "CONFLICT",
            "type": "string"
          },
          "issues": {
            "description": "An array of issues that were responsible for the error",
            "example": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"],
              "additionalProperties": false
            }
          }
        },
        "required": ["message", "code"],
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Authorization": { "type": "http", "scheme": "bearer" }
    }
  }
}
