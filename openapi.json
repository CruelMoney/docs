{
  "openapi": "3.0.3",
  "info": {
    "title": "Moderation API",
    "description": "API for automated content moderation",
    "version": "1.0.0"
  },
  "servers": [{ "url": "http://localhost:3000/api/v1" }],
  "tags": [
    { "name": "Actions" },
    { "name": "Queues" },
    { "name": "Webhooks" },
    { "name": "Wordlist" }
  ],
  "externalDocs": { "url": "https://docs.moderationapi.com" },
  "paths": {
    "/actions": {
      "get": {
        "operationId": "actions-list",
        "summary": "List moderation actions",
        "description": "List all available moderation actions for the authenticated organization.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          { "in": "query", "name": "queueId", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the action."
                      },
                      "key": {
                        "type": "string",
                        "nullable": true,
                        "description": "User defined key of the action."
                      },
                      "createdAt": {
                        "type": "string",
                        "description": "The date the action was created."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the action."
                      },
                      "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "The description of the action."
                      },
                      "queueBehaviour": {
                        "type": "string",
                        "enum": ["REMOVE", "ADD", "NO_CHANGE"],
                        "default": "NO_CHANGE",
                        "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status."
                      },
                      "filterInQueueIds": {
                        "type": "array",
                        "items": { "type": "string" },
                        "default": [],
                        "description": "The IDs of the queues the action is available in."
                      },
                      "position": {
                        "type": "string",
                        "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"],
                        "default": "ALL_QUEUES",
                        "description": "Show the action in all queues, selected queues or no queues (to use via API only)."
                      },
                      "possibleValues": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The value of the action."
                            }
                          },
                          "required": ["value"]
                        },
                        "default": [],
                        "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action."
                      },
                      "valueRequired": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether the action requires a value to be executed."
                      },
                      "freeText": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values."
                      },
                      "webhooks": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The webhook's name, used to identify it in the dashboard"
                            },
                            "description": {
                              "type": "string",
                              "nullable": true,
                              "description": "The webhook's description"
                            },
                            "url": {
                              "type": "string",
                              "format": "uri",
                              "description": "The webhook's URL. We'll call this URL when the event occurs."
                            },
                            "moderationActionId": {
                              "type": "string",
                              "nullable": true,
                              "description": "The ID of the moderation action to trigger the webhook on. Only used for moderation action webhooks."
                            },
                            "id": {
                              "type": "string",
                              "description": "The ID of the webhook."
                            }
                          },
                          "required": ["name", "url", "id"]
                        },
                        "default": [],
                        "description": "The action's webhooks."
                      }
                    },
                    "required": [
                      "id",
                      "createdAt",
                      "name",
                      "queueBehaviour",
                      "filterInQueueIds",
                      "position",
                      "possibleValues",
                      "valueRequired",
                      "freeText",
                      "webhooks"
                    ]
                  },
                  "description": "List of moderation actions with their associated webhooks"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "actions-create",
        "summary": "Create an action",
        "description": "Create an action.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "nullable": true,
                    "description": "User defined key of the action."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the action."
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "The description of the action."
                  },
                  "queueBehaviour": {
                    "type": "string",
                    "enum": ["REMOVE", "ADD", "NO_CHANGE"],
                    "default": "NO_CHANGE",
                    "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status."
                  },
                  "filterInQueueIds": {
                    "type": "array",
                    "items": { "type": "string" },
                    "default": [],
                    "description": "The IDs of the queues the action is available in."
                  },
                  "position": {
                    "type": "string",
                    "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"],
                    "default": "ALL_QUEUES",
                    "description": "Show the action in all queues, selected queues or no queues (to use via API only)."
                  },
                  "possibleValues": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string",
                          "description": "The value of the action."
                        }
                      },
                      "required": ["value"]
                    },
                    "default": [],
                    "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action."
                  },
                  "valueRequired": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the action requires a value to be executed."
                  },
                  "freeText": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values."
                  },
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The webhook's name, used to identify it in the dashboard"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "The webhook's description"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "The webhook's URL. We'll call this URL when the event occurs."
                        },
                        "id": {
                          "type": "string",
                          "description": "ID of an existing webhook or undefined if this is a new webhook."
                        }
                      },
                      "required": ["name", "url"]
                    },
                    "default": [],
                    "description": "The action's webhooks."
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the action."
                    },
                    "key": {
                      "type": "string",
                      "nullable": true,
                      "description": "User defined key of the action."
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "The date the action was created."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the action."
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "description": "The description of the action."
                    },
                    "queueBehaviour": {
                      "type": "string",
                      "enum": ["REMOVE", "ADD", "NO_CHANGE"],
                      "default": "NO_CHANGE",
                      "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status."
                    },
                    "filterInQueueIds": {
                      "type": "array",
                      "items": { "type": "string" },
                      "default": [],
                      "description": "The IDs of the queues the action is available in."
                    },
                    "position": {
                      "type": "string",
                      "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"],
                      "default": "ALL_QUEUES",
                      "description": "Show the action in all queues, selected queues or no queues (to use via API only)."
                    },
                    "possibleValues": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The value of the action."
                          }
                        },
                        "required": ["value"]
                      },
                      "default": [],
                      "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action."
                    },
                    "valueRequired": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether the action requires a value to be executed."
                    },
                    "freeText": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values."
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "name",
                    "queueBehaviour",
                    "filterInQueueIds",
                    "position",
                    "possibleValues",
                    "valueRequired",
                    "freeText"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "409": {
            "description": "Action with this key already exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.CONFLICT" }
              }
            }
          }
        }
      }
    },
    "/actions/{id}": {
      "get": {
        "operationId": "actions-get",
        "summary": "Get an action",
        "description": "Get an action by ID.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the action to get.",
            "schema": {
              "type": "string",
              "description": "The ID of the action to get."
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Action retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the action."
                    },
                    "key": {
                      "type": "string",
                      "nullable": true,
                      "description": "User defined key of the action."
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "The date the action was created."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the action."
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "description": "The description of the action."
                    },
                    "queueBehaviour": {
                      "type": "string",
                      "enum": ["REMOVE", "ADD", "NO_CHANGE"],
                      "default": "NO_CHANGE",
                      "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status."
                    },
                    "filterInQueueIds": {
                      "type": "array",
                      "items": { "type": "string" },
                      "default": [],
                      "description": "The IDs of the queues the action is available in."
                    },
                    "position": {
                      "type": "string",
                      "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"],
                      "default": "ALL_QUEUES",
                      "description": "Show the action in all queues, selected queues or no queues (to use via API only)."
                    },
                    "possibleValues": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The value of the action."
                          }
                        },
                        "required": ["value"]
                      },
                      "default": [],
                      "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action."
                    },
                    "valueRequired": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether the action requires a value to be executed."
                    },
                    "freeText": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values."
                    },
                    "webhooks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The webhook's name, used to identify it in the dashboard"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "description": "The webhook's description"
                          },
                          "url": {
                            "type": "string",
                            "format": "uri",
                            "description": "The webhook's URL. We'll call this URL when the event occurs."
                          },
                          "moderationActionId": {
                            "type": "string",
                            "nullable": true,
                            "description": "The ID of the moderation action to trigger the webhook on. Only used for moderation action webhooks."
                          },
                          "id": {
                            "type": "string",
                            "description": "The ID of the webhook."
                          }
                        },
                        "required": ["name", "url", "id"]
                      },
                      "default": [],
                      "description": "The action's webhooks."
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "name",
                    "queueBehaviour",
                    "filterInQueueIds",
                    "position",
                    "possibleValues",
                    "valueRequired",
                    "freeText",
                    "webhooks"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "actions-update",
        "summary": "Update an action",
        "description": "Update an action.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the action to update.",
            "schema": {
              "type": "string",
              "description": "The ID of the action to update."
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "nullable": true,
                    "description": "User defined key of the action."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the action."
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "The description of the action."
                  },
                  "queueBehaviour": {
                    "type": "string",
                    "enum": ["REMOVE", "ADD", "NO_CHANGE"],
                    "default": "NO_CHANGE",
                    "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status."
                  },
                  "filterInQueueIds": {
                    "type": "array",
                    "items": { "type": "string" },
                    "default": [],
                    "description": "The IDs of the queues the action is available in."
                  },
                  "position": {
                    "type": "string",
                    "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"],
                    "default": "ALL_QUEUES",
                    "description": "Show the action in all queues, selected queues or no queues (to use via API only)."
                  },
                  "possibleValues": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string",
                          "description": "The value of the action."
                        }
                      },
                      "required": ["value"]
                    },
                    "default": [],
                    "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action."
                  },
                  "valueRequired": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the action requires a value to be executed."
                  },
                  "freeText": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values."
                  },
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The webhook's name, used to identify it in the dashboard"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "The webhook's description"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "The webhook's URL. We'll call this URL when the event occurs."
                        },
                        "id": {
                          "type": "string",
                          "description": "ID of an existing webhook or undefined if this is a new webhook."
                        }
                      },
                      "required": ["name", "url"]
                    },
                    "default": [],
                    "description": "The action's webhooks."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the action."
                    },
                    "key": {
                      "type": "string",
                      "nullable": true,
                      "description": "User defined key of the action."
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "The date the action was created."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the action."
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "description": "The description of the action."
                    },
                    "queueBehaviour": {
                      "type": "string",
                      "enum": ["REMOVE", "ADD", "NO_CHANGE"],
                      "default": "NO_CHANGE",
                      "description": "Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status."
                    },
                    "filterInQueueIds": {
                      "type": "array",
                      "items": { "type": "string" },
                      "default": [],
                      "description": "The IDs of the queues the action is available in."
                    },
                    "position": {
                      "type": "string",
                      "enum": ["ALL_QUEUES", "SOME_QUEUES", "HIDDEN"],
                      "default": "ALL_QUEUES",
                      "description": "Show the action in all queues, selected queues or no queues (to use via API only)."
                    },
                    "possibleValues": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The value of the action."
                          }
                        },
                        "required": ["value"]
                      },
                      "default": [],
                      "description": "The possible values of the action. The user will be prompted to select one of these values when executing the action."
                    },
                    "valueRequired": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether the action requires a value to be executed."
                    },
                    "freeText": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether the action allows any text to be entered as a value or if it must be one of the possible values."
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "name",
                    "queueBehaviour",
                    "filterInQueueIds",
                    "position",
                    "possibleValues",
                    "valueRequired",
                    "freeText"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "409": {
            "description": "Action with this key already exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.CONFLICT" }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "actions-delete",
        "summary": "Delete an action",
        "description": "Delete an action and all of its webhooks.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the action to delete.",
            "schema": {
              "type": "string",
              "description": "The ID of the action to delete."
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Action deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "boolean",
                      "description": "Whether the action was deleted."
                    },
                    "id": {
                      "type": "string",
                      "description": "The ID of the action."
                    }
                  },
                  "required": ["deleted", "id"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      }
    },
    "/actions/execute": {
      "post": {
        "operationId": "actions-execute",
        "summary": "Execute moderation action",
        "description": "Execute a moderation action on one or more content items.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "actionKey": {
                    "type": "string",
                    "description": "ID or key of the action to execute"
                  },
                  "contentIds": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "IDs of the content items to apply the action to"
                  },
                  "value": {
                    "type": "string",
                    "description": "Optional value to provide with the action"
                  },
                  "queueId": {
                    "type": "string",
                    "description": "Optional queue ID if the action is queue-specific"
                  }
                },
                "required": ["actionKey", "contentIds"],
                "description": "Input parameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether the action was executed successfully"
                    }
                  },
                  "required": ["success"],
                  "description": "Execution result"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      }
    },
    "/actions/{actionId}/execute": {
      "post": {
        "operationId": "actions-executeDeprecated",
        "summary": "Execute an action",
        "description": "Execute an action on a set of content items in a queue.",
        "tags": ["Actions"],
        "security": [{ "Authorization": [] }],
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "actionId",
            "description": "The ID or key of the action to execute.",
            "schema": {
              "type": "string",
              "description": "The ID or key of the action to execute."
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contentIds": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "The IDs of the content items to perform the action on."
                  },
                  "queueId": {
                    "type": "string",
                    "description": "The ID of the queue the action was performed from if any."
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the action. Useful to set a reason for the action etc."
                  }
                },
                "required": ["contentIds"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Action executed successfully."
                    },
                    "actionId": {
                      "type": "string",
                      "description": "The ID of the action."
                    },
                    "ids": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "The IDs of the content items."
                    }
                  },
                  "required": ["success", "actionId", "ids"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      }
    },
    "/moderate/text": {
      "post": {
        "operationId": "moderation-text",
        "summary": "Analyze text content",
        "description": "Analyze text content with your configured moderation models and filters.",
        "tags": ["Moderate"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contentId": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "The unique ID of the content in your database."
                  },
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100000,
                    "description": "The text you'd like to analyze. We recommend to submit plain text or HTML"
                  },
                  "doNotStore": {
                    "type": "boolean",
                    "description": "Do not store the content. The content won't enter the review queue"
                  },
                  "authorId": {
                    "type": "string",
                    "description": "The author of the content."
                  },
                  "contextId": {
                    "type": "string",
                    "description": "For example the ID of a chat room or a post"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "Any metadata you want to store with the content"
                  }
                },
                "required": ["value"],
                "description": "Input parameters for text moderation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "Success if the request was successful"
                        },
                        "contentId": {
                          "type": "string",
                          "description": "The ID of the content. Only returned if the content was stored."
                        },
                        "request": {
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "type": "number",
                              "description": "The timestamp of the request"
                            },
                            "quota_usage": {
                              "type": "number",
                              "description": "The quota usage of the request"
                            }
                          },
                          "required": ["timestamp", "quota_usage"],
                          "description": "Information about the request"
                        },
                        "flagged": {
                          "type": "boolean",
                          "description": "Whether the content was flagged by any models"
                        },
                        "content_moderated": {
                          "type": "boolean",
                          "description": "Whether the content was moderated or not. Same as `content` !== `original`"
                        },
                        "unicode_spoofing": {
                          "type": "boolean",
                          "description": "Whether the content is using look-alike characters. Often used by spammers."
                        },
                        "data_found": {
                          "type": "boolean",
                          "description": "Whether any entity matchers found data for the content"
                        },
                        "original": {
                          "type": "string",
                          "description": "The original content"
                        },
                        "content": {
                          "type": "string",
                          "description": "The content after moderation. With all mask replacements applied and look-alike characters replaced with the original characters."
                        },
                        "nsfw": {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "description": "The label of the model"
                            },
                            "score": {
                              "type": "number",
                              "description": "The confidence of the model"
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the model"
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate"
                            },
                            "label_scores": {
                              "type": "object",
                              "properties": {
                                "SENSITIVE": {
                                  "type": "number",
                                  "description": "Mentions religion, politics, race, etc., but is neutral or positive."
                                },
                                "UNSAFE": {
                                  "type": "number",
                                  "description": "Sexual, hateful, profane, and inappropriate content."
                                },
                                "NEUTRAL": {
                                  "type": "number",
                                  "description": ""
                                }
                              },
                              "description": "The confidence of all labels"
                            }
                          },
                          "description": "The NSFW model output if enabled in your project. Read more at https://docs.moderationapi.com/models/nsfw"
                        },
                        "toxicity": {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "description": "The label of the model"
                            },
                            "score": {
                              "type": "number",
                              "description": "The confidence of the model"
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the model"
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate"
                            },
                            "label_scores": {
                              "type": "object",
                              "properties": {
                                "TOXICITY": {
                                  "type": "number",
                                  "description": "Rude or disrespectful content."
                                },
                                "PROFANITY": {
                                  "type": "number",
                                  "description": "Swearing, curse words, and other obscene language."
                                },
                                "DISCRIMINATION": {
                                  "type": "number",
                                  "description": "Discrimination of race, religion, gender, etc."
                                },
                                "SEVERE_TOXICITY": {
                                  "type": "number",
                                  "description": "Very hateful and aggressive content."
                                },
                                "INSULT": {
                                  "type": "number",
                                  "description": "Negative comments about looks or personality etc."
                                },
                                "THREAT": {
                                  "type": "number",
                                  "description": "Content containing intention to harm or violence."
                                },
                                "NEUTRAL": {
                                  "type": "number",
                                  "description": ""
                                }
                              },
                              "description": "The confidence of all labels"
                            }
                          },
                          "required": ["label_scores"],
                          "description": "The toxicity model output if enabled in your project. Read more at https://docs.moderationapi.com/models/toxicity"
                        },
                        "quality": {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "description": "The label of the model"
                            },
                            "score": {
                              "type": "number",
                              "description": "The confidence of the model"
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the model"
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate"
                            },
                            "label_scores": {
                              "type": "object",
                              "properties": {
                                "UNSUBSTANTIAL": {
                                  "type": "number",
                                  "description": "Trivial or short content."
                                },
                                "INCOHERENT": {
                                  "type": "number",
                                  "description": "Difficult to understand, nonsensical."
                                },
                                "SPAM": {
                                  "type": "number",
                                  "description": "Irrelevant and unsolicited commercial content."
                                },
                                "NEUTRAL": {
                                  "type": "number",
                                  "description": ""
                                }
                              },
                              "description": "The confidence of all labels"
                            }
                          },
                          "description": "The spam model output if enabled in your project. Read more at https://docs.moderationapi.com/models/spam"
                        },
                        "sentiment": {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "description": "The label of the model"
                            },
                            "score": {
                              "type": "number",
                              "description": "The confidence of the model"
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the model"
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate"
                            },
                            "label_scores": {
                              "type": "object",
                              "properties": {
                                "POSITIVE": {
                                  "type": "number",
                                  "description": "Positive sentiment."
                                },
                                "NEGATIVE": {
                                  "type": "number",
                                  "description": "Negative sentiment."
                                },
                                "NEUTRAL": {
                                  "type": "number",
                                  "description": ""
                                }
                              },
                              "description": "The confidence of all labels"
                            }
                          },
                          "description": "The sentiment model output if enabled in your project. Read more at https://docs.moderationapi.com/models/sentiment"
                        },
                        "propriety": {
                          "type": "object",
                          "properties": {
                            "label": {
                              "type": "string",
                              "description": "The label of the model"
                            },
                            "score": {
                              "type": "number",
                              "description": "The confidence of the model"
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the model"
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate"
                            },
                            "label_scores": {
                              "type": "object",
                              "properties": {
                                "FLIRTATION": {
                                  "type": "number",
                                  "description": "Pickup lines, compliments on appearance, etc."
                                },
                                "SEXUALLY_EXPLICIT": {
                                  "type": "number",
                                  "description": "References to sexual acts, body parts, etc."
                                },
                                "NEUTRAL": {
                                  "type": "number",
                                  "description": ""
                                }
                              },
                              "description": "The confidence of all labels"
                            }
                          },
                          "description": "The propriety model output if enabled in your project. Read more at https://docs.moderationapi.com/models/propriety"
                        },
                        "email": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"],
                              "description": "The detection mode."
                            },
                            "found": {
                              "type": "boolean",
                              "description": "Whether a match was found or not."
                            },
                            "matches": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The matches of the entity matcher."
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the matcher."
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                            }
                          },
                          "description": "The email entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/email"
                        },
                        "phone": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"],
                              "description": "The detection mode."
                            },
                            "found": {
                              "type": "boolean",
                              "description": "Whether a match was found or not."
                            },
                            "matches": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The matches of the entity matcher."
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the matcher."
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                            }
                          },
                          "description": "The phone entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/phone"
                        },
                        "url": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"],
                              "description": "The detection mode."
                            },
                            "found": {
                              "type": "boolean",
                              "description": "Whether a match was found or not."
                            },
                            "matches": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The matches of the entity matcher."
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the matcher."
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                            }
                          },
                          "description": "The url entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/url"
                        },
                        "address": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"],
                              "description": "The detection mode."
                            },
                            "found": {
                              "type": "boolean",
                              "description": "Whether a match was found or not."
                            },
                            "matches": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The matches of the entity matcher."
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the matcher."
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                            }
                          },
                          "description": "The address entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/address"
                        },
                        "name": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"],
                              "description": "The detection mode."
                            },
                            "found": {
                              "type": "boolean",
                              "description": "Whether a match was found or not."
                            },
                            "matches": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The matches of the entity matcher."
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the matcher."
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                            }
                          },
                          "description": "The name entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/name"
                        },
                        "username": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"],
                              "description": "The detection mode."
                            },
                            "found": {
                              "type": "boolean",
                              "description": "Whether a match was found or not."
                            },
                            "matches": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The matches of the entity matcher."
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the matcher."
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                            }
                          },
                          "description": "The username entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/username"
                        },
                        "profanity": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"],
                              "description": "The detection mode."
                            },
                            "found": {
                              "type": "boolean",
                              "description": "Whether a match was found or not."
                            },
                            "matches": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The matches of the entity matcher."
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the matcher."
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                            }
                          },
                          "description": "The profanity entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/profanity"
                        },
                        "sensitive": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"],
                              "description": "The detection mode."
                            },
                            "found": {
                              "type": "boolean",
                              "description": "Whether a match was found or not."
                            },
                            "matches": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The matches of the entity matcher."
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the matcher."
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                            }
                          },
                          "description": "The sensitive numbers entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/sensitive"
                        },
                        "wordlist": {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "enum": ["NORMAL", "SUSPICIOUS", "PARANOID"],
                              "description": "The detection mode."
                            },
                            "found": {
                              "type": "boolean",
                              "description": "Whether a match was found or not."
                            },
                            "matches": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The matches of the entity matcher."
                            },
                            "components": {
                              "description": "The components of the matcher."
                            },
                            "error": {
                              "type": "string",
                              "description": "Indicates an error with the matcher."
                            },
                            "warning": {
                              "type": "string",
                              "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                            }
                          },
                          "description": "The wordlist entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/word"
                        },
                        "wordlists": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "type": "string",
                                "enum": ["BLOCKLIST", "ALLOWLIST", "PASS"],
                                "description": "The flagging mode."
                              },
                              "found": {
                                "type": "boolean",
                                "description": "Whether a match was found or not."
                              },
                              "matches": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "The matches of the entity matcher."
                              },
                              "components": {
                                "description": "The components of the matcher."
                              },
                              "error": {
                                "type": "string",
                                "description": "Indicates an error with the matcher."
                              },
                              "warning": {
                                "type": "string",
                                "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                              },
                              "flagged": {
                                "type": "boolean",
                                "description": "Whether the wordlists flagged the content."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the wordlist"
                              },
                              "id": {
                                "type": "string",
                                "description": "The ID of the wordlist"
                              },
                              "score": {
                                "type": "number",
                                "description": "The score of the wordlist"
                              }
                            },
                            "required": [
                              "mode",
                              "flagged",
                              "name",
                              "id",
                              "score"
                            ]
                          },
                          "description": "The wordlist entity matcher outputs if enabled in your project. Read more at https://docs.moderationapi.com/models/word"
                        }
                      },
                      "required": [
                        "status",
                        "request",
                        "flagged",
                        "content_moderated",
                        "unicode_spoofing",
                        "data_found",
                        "original",
                        "content"
                      ]
                    },
                    { "type": "object", "additionalProperties": {} }
                  ],
                  "description": "Moderation analysis results including model outputs and detected patterns"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/moderate/object": {
      "post": {
        "operationId": "moderation-object",
        "summary": "Analyze object.",
        "description": "Analyze an object with multiple fields including text, images, video, audio. Use to moderate a post, a profile, a form submission or anything that have multiple fields.",
        "tags": ["Moderate"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contentId": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "The unique ID of the content in your database."
                  },
                  "doNotStore": {
                    "type": "boolean",
                    "description": "Do not store the content. The content won't enter the review queue"
                  },
                  "authorId": {
                    "type": "string",
                    "description": "The author of the content."
                  },
                  "contextId": {
                    "type": "string",
                    "description": "For example the ID of a chat room or a post"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "Any metadata you want to store with the content"
                  },
                  "value": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["profile", "event", "product", "object"],
                        "description": "The type of the object you want to analyze."
                      },
                      "data": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["text", "image", "video", "audio"],
                              "description": "The type of content (e.g., \"text\", \"image\", \"video\")"
                            },
                            "modelIds": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "Optional array of specific model IDs to use"
                            },
                            "value": {
                              "type": "string",
                              "description": "The content to analyze"
                            }
                          },
                          "required": ["type", "value"]
                        }
                      }
                    },
                    "required": ["type", "data"],
                    "description": "The object you want to analyze."
                  }
                },
                "required": ["value"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "Success if the request was successful"
                        },
                        "contentId": {
                          "type": "string",
                          "description": "The ID of the content. Only returned if the content was stored."
                        },
                        "request": {
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "type": "number",
                              "description": "The timestamp of the request"
                            },
                            "quota_usage": {
                              "type": "number",
                              "description": "The quota usage of the request"
                            }
                          },
                          "required": ["timestamp", "quota_usage"],
                          "description": "Information about the request"
                        },
                        "flagged": {
                          "type": "boolean",
                          "description": "Whether the content was flagged by any models"
                        },
                        "unicode_spoofing": {
                          "type": "boolean",
                          "description": "Whether the content is using look-alike characters. Often used by spammers."
                        },
                        "data_found": {
                          "type": "boolean",
                          "description": "Whether any entity matchers found data for the content"
                        },
                        "labels": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "type": "string",
                                "description": "The label of the model"
                              },
                              "model": {
                                "type": "string",
                                "description": "The model that found the label"
                              },
                              "score": {
                                "type": "number",
                                "minimum": 0,
                                "maximum": 1,
                                "description": "The confidence of the model"
                              }
                            },
                            "required": ["label", "model", "score"]
                          },
                          "description": "The scores of each label"
                        },
                        "entities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "The model that found the entity"
                              },
                              "matches": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "The matches of the entity"
                              },
                              "score": {
                                "type": "number",
                                "description": "The similarity score of the matches"
                              }
                            },
                            "required": ["model", "matches"]
                          },
                          "description": "The entities found in the content"
                        },
                        "wordlists": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "type": "string",
                                "enum": ["BLOCKLIST", "ALLOWLIST", "PASS"],
                                "description": "The flagging mode."
                              },
                              "found": {
                                "type": "boolean",
                                "description": "Whether a match was found or not."
                              },
                              "matches": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "The matches of the entity matcher."
                              },
                              "components": {
                                "description": "The components of the matcher."
                              },
                              "error": {
                                "type": "string",
                                "description": "Indicates an error with the matcher."
                              },
                              "warning": {
                                "type": "string",
                                "description": "Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate."
                              },
                              "flagged": {
                                "type": "boolean",
                                "description": "Whether the wordlists flagged the content."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the wordlist"
                              },
                              "id": {
                                "type": "string",
                                "description": "The ID of the wordlist"
                              },
                              "score": {
                                "type": "number",
                                "description": "The score of the wordlist"
                              }
                            },
                            "required": [
                              "mode",
                              "flagged",
                              "name",
                              "id",
                              "score"
                            ]
                          },
                          "description": "The wordlist entity matcher outputs if enabled in your project. Read more at https://docs.moderationapi.com/models/word"
                        },
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string",
                                "description": "The key of the field"
                              },
                              "flagged": {
                                "type": "boolean",
                                "description": "Whether the field was flagged"
                              },
                              "flagged_by": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "The models that flagged the field"
                              }
                            },
                            "required": ["key", "flagged", "flagged_by"]
                          },
                          "description": "The fields in the object and their flags"
                        }
                      },
                      "required": [
                        "status",
                        "request",
                        "flagged",
                        "unicode_spoofing",
                        "data_found",
                        "labels",
                        "entities",
                        "fields"
                      ]
                    },
                    { "type": "object", "additionalProperties": {} }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/moderate/image": {
      "post": {
        "operationId": "moderation-image",
        "summary": "Analyze image",
        "description": "Analyze image with your Moderation API project",
        "tags": ["Moderate"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contentId": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "The unique ID of the content in your database."
                  },
                  "doNotStore": {
                    "type": "boolean",
                    "description": "Do not store the content. The content won't enter the review queue"
                  },
                  "authorId": {
                    "type": "string",
                    "description": "The author of the content."
                  },
                  "contextId": {
                    "type": "string",
                    "description": "For example the ID of a chat room or a post"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "Any metadata you want to store with the content"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL of the image you want to analyze."
                  }
                },
                "required": ["url"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success if the request was successful"
                    },
                    "contentId": {
                      "type": "string",
                      "description": "The ID of the content. Only returned if the content was stored."
                    },
                    "request": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "number",
                          "description": "The timestamp of the request"
                        },
                        "quota_usage": {
                          "type": "number",
                          "description": "The quota usage of the request"
                        }
                      },
                      "required": ["timestamp", "quota_usage"],
                      "description": "Information about the request"
                    },
                    "flagged": {
                      "type": "boolean",
                      "description": "Whether the content was flagged by any models"
                    },
                    "labels": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "enum": [
                              "nudity",
                              "suggestive",
                              "gore",
                              "hate",
                              "violence",
                              "weapon",
                              "smoking",
                              "drugs",
                              "alcohol",
                              "text",
                              "toxic"
                            ],
                            "description": "The label of the model"
                          },
                          "score": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1,
                            "description": "The confidence of the model"
                          }
                        },
                        "required": ["label", "score"]
                      },
                      "description": "The scores of each label"
                    },
                    "texts": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "The texts found in the image, if the image text model is enabled"
                    }
                  },
                  "required": ["status", "request", "flagged", "labels"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/moderate/video": {
      "post": {
        "operationId": "moderation-video",
        "summary": "Analyze video content",
        "description": "Analyze video content with your configured moderation models and filters.",
        "tags": ["Moderate"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contentId": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "The unique ID of the content in your database."
                  },
                  "doNotStore": {
                    "type": "boolean",
                    "description": "Do not store the content. The content won't enter the review queue"
                  },
                  "authorId": {
                    "type": "string",
                    "description": "The author of the content."
                  },
                  "contextId": {
                    "type": "string",
                    "description": "For example the ID of a chat room or a post"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "Any metadata you want to store with the content"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL of the video you want to analyze."
                  }
                },
                "required": ["url"],
                "description": "Input parameters for video moderation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success if the request was successful"
                    },
                    "contentId": {
                      "type": "string",
                      "description": "The ID of the content. Only returned if the content was stored."
                    },
                    "request": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "number",
                          "description": "The timestamp of the request"
                        },
                        "quota_usage": {
                          "type": "number",
                          "description": "The quota usage of the request"
                        }
                      },
                      "required": ["timestamp", "quota_usage"],
                      "description": "Information about the request"
                    },
                    "flagged": {
                      "type": "boolean",
                      "description": "Whether the content was flagged by any models"
                    }
                  },
                  "required": ["status", "request", "flagged"],
                  "description": "Video moderation analysis results"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/moderate/audio": {
      "post": {
        "operationId": "moderation-audio",
        "summary": "Analyze audio content",
        "description": "Analyze audio content with your configured moderation models and filters.",
        "tags": ["Moderate"],
        "security": [{ "Authorization": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contentId": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "The unique ID of the content in your database."
                  },
                  "doNotStore": {
                    "type": "boolean",
                    "description": "Do not store the content. The content won't enter the review queue"
                  },
                  "authorId": {
                    "type": "string",
                    "description": "The author of the content."
                  },
                  "contextId": {
                    "type": "string",
                    "description": "For example the ID of a chat room or a post"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "Any metadata you want to store with the content"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "The URL of the audio you want to analyze."
                  }
                },
                "required": ["url"],
                "description": "Input parameters for audio moderation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success if the request was successful"
                    },
                    "contentId": {
                      "type": "string",
                      "description": "The ID of the content. Only returned if the content was stored."
                    },
                    "request": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "number",
                          "description": "The timestamp of the request"
                        },
                        "quota_usage": {
                          "type": "number",
                          "description": "The quota usage of the request"
                        }
                      },
                      "required": ["timestamp", "quota_usage"],
                      "description": "Information about the request"
                    },
                    "flagged": {
                      "type": "boolean",
                      "description": "Whether the content was flagged by any models"
                    }
                  },
                  "required": ["status", "request", "flagged"],
                  "description": "Audio moderation analysis results"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/account": {
      "get": {
        "operationId": "account-get",
        "summary": "Get account details",
        "description": "Get account details",
        "tags": ["Account"],
        "security": [{ "Authorization": [] }],
        "responses": {
          "200": {
            "description": "Account details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the account"
                    },
                    "paid_plan_name": {
                      "type": "string",
                      "description": "Name of the paid plan"
                    },
                    "text_api_quota": {
                      "type": "number",
                      "description": "Text API quota"
                    },
                    "remaining_quota": {
                      "type": "number",
                      "description": "Remaining quota"
                    },
                    "current_project": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the current project"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the current project"
                        }
                      },
                      "required": ["id", "name"]
                    }
                  },
                  "required": [
                    "id",
                    "paid_plan_name",
                    "text_api_quota",
                    "remaining_quota"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          }
        }
      }
    },
    "/wordlist": {
      "get": {
        "operationId": "wordlist-list",
        "summary": "List wordlists",
        "description": "List all wordlists for the authenticated organization",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the wordlist"
                      },
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "description": "Name of the wordlist"
                      },
                      "createdAt": {
                        "type": "string",
                        "nullable": true,
                        "description": "When the wordlist was created"
                      },
                      "userId": {
                        "type": "string",
                        "nullable": true,
                        "description": "User who created the wordlist"
                      }
                    },
                    "required": ["id", "name", "createdAt", "userId"]
                  },
                  "description": "Array of wordlists"
                }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/wordlist/{id}": {
      "get": {
        "operationId": "wordlist-getWordlistPublic",
        "summary": "Get wordlist",
        "description": "Get a specific wordlist by ID",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the wordlist to get",
            "schema": {
              "type": "string",
              "description": "ID of the wordlist to get"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the wordlist"
                    },
                    "name": {
                      "type": "string",
                      "nullable": true,
                      "description": "Name of the wordlist"
                    },
                    "words": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "Words in the wordlist"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Creation date of the wordlist"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "ID of the organization"
                    },
                    "userId": {
                      "type": "string",
                      "nullable": true,
                      "description": "ID of the user"
                    },
                    "strict": {
                      "type": "boolean",
                      "description": "Strict mode"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "words",
                    "createdAt",
                    "organizationId",
                    "userId",
                    "strict"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "wordlist-update",
        "summary": "Update wordlist",
        "description": "Update a wordlist",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the wordlist to update",
            "schema": {
              "type": "string",
              "description": "ID of the wordlist to update"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New name for the wordlist"
                  },
                  "words": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "New words for the wordlist. Replace the existing words with these new ones. Duplicate words will be ignored."
                  },
                  "strict": {
                    "type": "boolean",
                    "description": "Deprecated. Now using threshold in project settings."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wordlist updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the wordlist"
                    },
                    "name": {
                      "type": "string",
                      "nullable": true,
                      "description": "Name of the wordlist"
                    },
                    "words": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "Words in the wordlist"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Creation date of the wordlist"
                    },
                    "organizationId": {
                      "type": "string",
                      "description": "ID of the organization"
                    },
                    "userId": {
                      "type": "string",
                      "nullable": true,
                      "description": "ID of the user"
                    },
                    "strict": {
                      "type": "boolean",
                      "description": "Strict mode"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "words",
                    "createdAt",
                    "organizationId",
                    "userId",
                    "strict"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      }
    },
    "/wordlist/{id}/embedding-status": {
      "get": {
        "operationId": "wordlist-wordlistEmbeddingStatus",
        "summary": "Get embedding status",
        "description": "Get the current embedding progress status for a wordlist",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the wordlist to check embedding status for",
            "schema": {
              "type": "string",
              "description": "ID of the wordlist to check embedding status for"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "progress": {
                      "type": "number",
                      "description": "Percentage of words that have been embedded (0-100)"
                    },
                    "totalWords": {
                      "type": "number",
                      "description": "Total number of words in the wordlist"
                    },
                    "remainingWords": {
                      "type": "number",
                      "description": "Number of words still waiting to be embedded"
                    }
                  },
                  "required": ["progress", "totalWords", "remainingWords"],
                  "description": "Embedding status details"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "403": {
            "description": "Insufficient access",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.FORBIDDEN" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error.INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/wordlist/{id}/words": {
      "post": {
        "operationId": "wordlist-addWords",
        "summary": "Add words to wordlist",
        "description": "Add words to an existing wordlist",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the wordlist to add words to",
            "schema": {
              "type": "string",
              "description": "ID of the wordlist to add words to"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "words": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "Array of words to add to the wordlist. Duplicate words will be ignored."
                  }
                },
                "required": ["words"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Words successfully added to wordlist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "addedCount": {
                      "type": "number",
                      "description": "Number of words added"
                    },
                    "totalCount": {
                      "type": "number",
                      "description": "Total number of words in wordlist"
                    },
                    "addedWords": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "List of words that were added"
                    }
                  },
                  "required": ["addedCount", "totalCount", "addedWords"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "wordlist-removeWords",
        "summary": "Remove words from wordlist",
        "description": "Remove words from an existing wordlist",
        "tags": ["wordlist"],
        "security": [{ "Authorization": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the wordlist to remove words from",
            "schema": {
              "type": "string",
              "description": "ID of the wordlist to remove words from"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "words",
            "description": "Array of words to remove from the wordlist",
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Array of words to remove from the wordlist"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Words successfully removed from wordlist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "removedCount": {
                      "type": "number",
                      "description": "Number of words removed"
                    },
                    "totalCount": {
                      "type": "number",
                      "description": "Total number of words in wordlist"
                    },
                    "removedWords": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "List of words removed"
                    }
                  },
                  "required": ["removedCount", "totalCount", "removedWords"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.BAD_REQUEST" }
              }
            }
          },
          "401": {
            "description": "Authorization not provided",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.UNAUTHORIZED" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/error.NOT_FOUND" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Authorization": { "type": "http", "scheme": "bearer" }
    },
    "schemas": {
      "error.BAD_REQUEST": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Invalid input data"
          },
          "code": {
            "type": "string",
            "description": "The error code",
            "example": "BAD_REQUEST"
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"]
            },
            "description": "An array of issues that were responsible for the error",
            "example": []
          }
        },
        "required": ["message", "code"],
        "title": "Invalid input data error (400)",
        "description": "The error information",
        "example": {
          "code": "BAD_REQUEST",
          "message": "Invalid input data",
          "issues": []
        }
      },
      "error.UNAUTHORIZED": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Authorization not provided"
          },
          "code": {
            "type": "string",
            "description": "The error code",
            "example": "UNAUTHORIZED"
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"]
            },
            "description": "An array of issues that were responsible for the error",
            "example": []
          }
        },
        "required": ["message", "code"],
        "title": "Authorization not provided error (401)",
        "description": "The error information",
        "example": {
          "code": "UNAUTHORIZED",
          "message": "Authorization not provided",
          "issues": []
        }
      },
      "error.FORBIDDEN": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Insufficient access"
          },
          "code": {
            "type": "string",
            "description": "The error code",
            "example": "FORBIDDEN"
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"]
            },
            "description": "An array of issues that were responsible for the error",
            "example": []
          }
        },
        "required": ["message", "code"],
        "title": "Insufficient access error (403)",
        "description": "The error information",
        "example": {
          "code": "FORBIDDEN",
          "message": "Insufficient access",
          "issues": []
        }
      },
      "error.NOT_FOUND": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Not found"
          },
          "code": {
            "type": "string",
            "description": "The error code",
            "example": "NOT_FOUND"
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"]
            },
            "description": "An array of issues that were responsible for the error",
            "example": []
          }
        },
        "required": ["message", "code"],
        "title": "Not found error (404)",
        "description": "The error information",
        "example": { "code": "NOT_FOUND", "message": "Not found", "issues": [] }
      },
      "error.INTERNAL_SERVER_ERROR": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Internal server error"
          },
          "code": {
            "type": "string",
            "description": "The error code",
            "example": "INTERNAL_SERVER_ERROR"
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"]
            },
            "description": "An array of issues that were responsible for the error",
            "example": []
          }
        },
        "required": ["message", "code"],
        "title": "Internal server error error (500)",
        "description": "The error information",
        "example": {
          "code": "INTERNAL_SERVER_ERROR",
          "message": "Internal server error",
          "issues": []
        }
      },
      "error.CONFLICT": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message",
            "example": "Action with this key already exists"
          },
          "code": {
            "type": "string",
            "description": "The error code",
            "example": "CONFLICT"
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": { "message": { "type": "string" } },
              "required": ["message"]
            },
            "description": "An array of issues that were responsible for the error",
            "example": []
          }
        },
        "required": ["message", "code"],
        "title": "Action with this key already exists error (409)",
        "description": "The error information",
        "example": {
          "code": "CONFLICT",
          "message": "Action with this key already exists",
          "issues": []
        }
      }
    }
  }
}
